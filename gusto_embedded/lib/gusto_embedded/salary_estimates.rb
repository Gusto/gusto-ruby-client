# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'faraday'
require 'faraday/multipart'
require 'sorbet-runtime'

module GustoEmbedded
  extend T::Sig
  class SalaryEstimates
    extend T::Sig


    sig { params(sdk_config: SDKConfiguration).void }
    def initialize(sdk_config)
      @sdk_configuration = sdk_config
    end


    sig { params(employee_id: ::String, request_body: ::GustoEmbedded::Operations::PostV1EmployeesEmployeeIdSalaryEstimatesRequestBody, x_gusto_api_version: T.nilable(::GustoEmbedded::Operations::PostV1EmployeesEmployeeIdSalaryEstimatesHeaderXGustoAPIVersion)).returns(::GustoEmbedded::Operations::PostV1EmployeesEmployeeIdSalaryEstimatesResponse) }
    def post_v1_employees_employee_id_salary_estimates(employee_id, request_body, x_gusto_api_version = nil)
      # post_v1_employees_employee_id_salary_estimates - Create a salary estimate for an employee
      # Create a salary estimate for an employee. This endpoint helps calculate a reasonable salary for S Corp owners based on their occupation, experience level, location, and business revenue.
      # 
      # A salary estimate must include:
      # - Annual net revenue of the business
      # - ZIP code for location-based salary data
      # - One or more occupations with experience levels and time percentages (must sum to 100%)
      # 
      # Only one in-progress salary estimate can exist per employee at a time. If an in-progress estimate already exists, you must either accept it or use the update endpoint.
      # 
      # scope: `salary_estimates:write`
      # 
      request = ::GustoEmbedded::Operations::PostV1EmployeesEmployeeIdSalaryEstimatesRequest.new(
        
        employee_id: employee_id,
        request_body: request_body,
        x_gusto_api_version: x_gusto_api_version
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::GustoEmbedded::Operations::PostV1EmployeesEmployeeIdSalaryEstimatesRequest,
        base_url,
        '/v1/employees/{employee_id}/salary_estimates',
        request
      )
      headers = Utils.get_headers(request)
      req_content_type, data, form = Utils.serialize_request_body(request, :request_body, :json)
      headers['content-type'] = req_content_type
      raise StandardError, 'request body is required' if data.nil? && form.nil?
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.post(url) do |req|
        req.headers = headers
        security = !@sdk_configuration.nil? && !@sdk_configuration.security_source.nil? ? @sdk_configuration.security_source.call : nil
        Utils.configure_request_security(req, security) if !security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::GustoEmbedded::Operations::PostV1EmployeesEmployeeIdSalaryEstimatesResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 201
        if Utils.match_content_type(content_type, 'application/json')
          out = Crystalline.unmarshal_json(JSON.parse(r.env.response_body), ::GustoEmbedded::Shared::SalaryEstimate)
          res.salary_estimate = out
        end
      elsif [404, 422].include?(r.status)
        if Utils.match_content_type(content_type, 'application/json')
          out = Crystalline.unmarshal_json(JSON.parse(r.env.response_body), ::GustoEmbedded::Shared::UnprocessableEntityErrorObject)
          res.unprocessable_entity_error_object = out
        end
      end

      res
    end


    sig { params(uuid: ::String, x_gusto_api_version: T.nilable(::GustoEmbedded::Operations::GetV1SalaryEstimatesIdHeaderXGustoAPIVersion)).returns(::GustoEmbedded::Operations::GetV1SalaryEstimatesIdResponse) }
    def get_v1_salary_estimates_id(uuid, x_gusto_api_version = nil)
      # get_v1_salary_estimates_id - Get a salary estimate
      # Retrieve a salary estimate by its UUID. Returns the estimated salary calculation along with all occupation details, revenue, and location information.
      # 
      # scope: `salary_estimates:read`
      # 
      request = ::GustoEmbedded::Operations::GetV1SalaryEstimatesIdRequest.new(
        
        uuid: uuid,
        x_gusto_api_version: x_gusto_api_version
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::GustoEmbedded::Operations::GetV1SalaryEstimatesIdRequest,
        base_url,
        '/v1/salary_estimates/{uuid}',
        request
      )
      headers = Utils.get_headers(request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        security = !@sdk_configuration.nil? && !@sdk_configuration.security_source.nil? ? @sdk_configuration.security_source.call : nil
        Utils.configure_request_security(req, security) if !security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::GustoEmbedded::Operations::GetV1SalaryEstimatesIdResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Crystalline.unmarshal_json(JSON.parse(r.env.response_body), ::GustoEmbedded::Shared::SalaryEstimate)
          res.salary_estimate = out
        end
      elsif r.status == 404
        if Utils.match_content_type(content_type, 'application/json')
          out = Crystalline.unmarshal_json(JSON.parse(r.env.response_body), ::GustoEmbedded::Shared::UnprocessableEntityErrorObject)
          res.unprocessable_entity_error_object = out
        end
      end

      res
    end


    sig { params(uuid: ::String, request_body: ::GustoEmbedded::Operations::PutV1SalaryEstimatesIdRequestBody, x_gusto_api_version: T.nilable(::GustoEmbedded::Operations::PutV1SalaryEstimatesIdHeaderXGustoAPIVersion)).returns(::GustoEmbedded::Operations::PutV1SalaryEstimatesIdResponse) }
    def put_v1_salary_estimates_id(uuid, request_body, x_gusto_api_version = nil)
      # put_v1_salary_estimates_id - Update a salary estimate
      # Update an existing salary estimate. You can modify the annual net revenue, ZIP code, and occupations.
      # 
      # The salary estimate must not be finalized (accepted). Once accepted, salary estimates become read-only for record-keeping purposes.
      # 
      # scope: `salary_estimates:write`
      # 
      request = ::GustoEmbedded::Operations::PutV1SalaryEstimatesIdRequest.new(
        
        uuid: uuid,
        request_body: request_body,
        x_gusto_api_version: x_gusto_api_version
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::GustoEmbedded::Operations::PutV1SalaryEstimatesIdRequest,
        base_url,
        '/v1/salary_estimates/{uuid}',
        request
      )
      headers = Utils.get_headers(request)
      req_content_type, data, form = Utils.serialize_request_body(request, :request_body, :json)
      headers['content-type'] = req_content_type
      raise StandardError, 'request body is required' if data.nil? && form.nil?
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.put(url) do |req|
        req.headers = headers
        security = !@sdk_configuration.nil? && !@sdk_configuration.security_source.nil? ? @sdk_configuration.security_source.call : nil
        Utils.configure_request_security(req, security) if !security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::GustoEmbedded::Operations::PutV1SalaryEstimatesIdResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Crystalline.unmarshal_json(JSON.parse(r.env.response_body), ::GustoEmbedded::Shared::SalaryEstimate)
          res.salary_estimate = out
        end
      elsif [404, 422].include?(r.status)
        if Utils.match_content_type(content_type, 'application/json')
          out = Crystalline.unmarshal_json(JSON.parse(r.env.response_body), ::GustoEmbedded::Shared::UnprocessableEntityErrorObject)
          res.unprocessable_entity_error_object = out
        end
      end

      res
    end


    sig { params(uuid: ::String, request_body: ::GustoEmbedded::Operations::PostV1SalaryEstimatesUuidAcceptRequestBody, x_gusto_api_version: T.nilable(::GustoEmbedded::Operations::PostV1SalaryEstimatesUuidAcceptHeaderXGustoAPIVersion)).returns(::GustoEmbedded::Operations::PostV1SalaryEstimatesUuidAcceptResponse) }
    def post_v1_salary_estimates_uuid_accept(uuid, request_body, x_gusto_api_version = nil)
      # post_v1_salary_estimates_uuid_accept - Accept a salary estimate
      # Accept and finalize a salary estimate. This associates the estimate with an employee job and marks it as accepted.
      # 
      # Once accepted, the salary estimate becomes read-only for record-keeping purposes. The accepted salary can then be used to set up compensation for the employee.
      # 
      # scope: `salary_estimates:write`
      # 
      request = ::GustoEmbedded::Operations::PostV1SalaryEstimatesUuidAcceptRequest.new(
        
        uuid: uuid,
        request_body: request_body,
        x_gusto_api_version: x_gusto_api_version
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::GustoEmbedded::Operations::PostV1SalaryEstimatesUuidAcceptRequest,
        base_url,
        '/v1/salary_estimates/{uuid}/accept',
        request
      )
      headers = Utils.get_headers(request)
      req_content_type, data, form = Utils.serialize_request_body(request, :request_body, :json)
      headers['content-type'] = req_content_type
      raise StandardError, 'request body is required' if data.nil? && form.nil?
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.post(url) do |req|
        req.headers = headers
        security = !@sdk_configuration.nil? && !@sdk_configuration.security_source.nil? ? @sdk_configuration.security_source.call : nil
        Utils.configure_request_security(req, security) if !security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::GustoEmbedded::Operations::PostV1SalaryEstimatesUuidAcceptResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Crystalline.unmarshal_json(JSON.parse(r.env.response_body), ::GustoEmbedded::Shared::SalaryEstimate)
          res.salary_estimate = out
        end
      elsif [404, 422].include?(r.status)
        if Utils.match_content_type(content_type, 'application/json')
          out = Crystalline.unmarshal_json(JSON.parse(r.env.response_body), ::GustoEmbedded::Shared::UnprocessableEntityErrorObject)
          res.unprocessable_entity_error_object = out
        end
      end

      res
    end


    sig { params(security: ::GustoEmbedded::Operations::GetV1SalaryEstimatesOccupationsSecurity, search: ::String, x_gusto_api_version: T.nilable(::GustoEmbedded::Operations::GetV1SalaryEstimatesOccupationsHeaderXGustoAPIVersion)).returns(::GustoEmbedded::Operations::GetV1SalaryEstimatesOccupationsResponse) }
    def get_v1_salary_estimates_occupations(security, search, x_gusto_api_version = nil)
      # get_v1_salary_estimates_occupations - Search for BLS occupations
      # Search for Bureau of Labor Statistics (BLS) occupations by name or keyword. This endpoint helps users find the appropriate occupation codes to use when creating or updating salary estimates.
      # 
      # Returns a list of matching occupations with their codes, titles, and descriptions.
      # 
      # U0001F4D8 System Access Authentication
      # 
      # This endpoint uses the [Bearer Auth scheme with the system-level access token in the HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/system-access)
      # 
      # scope: `salary_estimates:read`
      # 
      request = ::GustoEmbedded::Operations::GetV1SalaryEstimatesOccupationsRequest.new(
        
        search: search,
        x_gusto_api_version: x_gusto_api_version
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/v1/salary_estimates/occupations"
      headers = Utils.get_headers(request)
      query_params = Utils.get_query_params(::GustoEmbedded::Operations::GetV1SalaryEstimatesOccupationsRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, security) if !security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::GustoEmbedded::Operations::GetV1SalaryEstimatesOccupationsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Crystalline.unmarshal_json(JSON.parse(r.env.response_body), T::Array[::GustoEmbedded::Shared::BLSOccupation])
          res.bls_occupations = out
        end
      elsif r.status == 422
        if Utils.match_content_type(content_type, 'application/json')
          out = Crystalline.unmarshal_json(JSON.parse(r.env.response_body), ::GustoEmbedded::Shared::UnprocessableEntityErrorObject)
          res.unprocessable_entity_error_object = out
        end
      end

      res
    end
  end
end
