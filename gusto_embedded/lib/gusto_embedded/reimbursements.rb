# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'faraday'
require 'faraday/multipart'
require 'sorbet-runtime'

module GustoEmbedded
  extend T::Sig
  class Reimbursements
    extend T::Sig


    sig { params(sdk_config: SDKConfiguration).void }
    def initialize(sdk_config)
      @sdk_configuration = sdk_config
    end


    sig { params(employee_id: ::String, x_gusto_api_version: T.nilable(::GustoEmbedded::Operations::GetV1EmployeesEmployeeIdRecurringReimbursementsHeaderXGustoAPIVersion), page: T.nilable(::Integer), per: T.nilable(::Integer)).returns(::GustoEmbedded::Operations::GetV1EmployeesEmployeeIdRecurringReimbursementsResponse) }
    def get_v1_employees_employee_id_recurring_reimbursements(employee_id, x_gusto_api_version = nil, page = nil, per = nil)
      # get_v1_employees_employee_id_recurring_reimbursements - Get recurring reimbursements for an employee
      # Get all active recurring reimbursements for an employee.
      # 
      # scope: `reimbursements:read`
      # 
      request = ::GustoEmbedded::Operations::GetV1EmployeesEmployeeIdRecurringReimbursementsRequest.new(
        
        employee_id: employee_id,
        x_gusto_api_version: x_gusto_api_version,
        page: page,
        per: per
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::GustoEmbedded::Operations::GetV1EmployeesEmployeeIdRecurringReimbursementsRequest,
        base_url,
        '/v1/employees/{employee_id}/recurring_reimbursements',
        request
      )
      headers = Utils.get_headers(request)
      query_params = Utils.get_query_params(::GustoEmbedded::Operations::GetV1EmployeesEmployeeIdRecurringReimbursementsRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        security = !@sdk_configuration.nil? && !@sdk_configuration.security_source.nil? ? @sdk_configuration.security_source.call : nil
        Utils.configure_request_security(req, security) if !security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::GustoEmbedded::Operations::GetV1EmployeesEmployeeIdRecurringReimbursementsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Crystalline.unmarshal_json(JSON.parse(r.env.response_body), T::Array[::GustoEmbedded::Operations::GetV1EmployeesEmployeeIdRecurringReimbursementsResponseBody])
          res.response_bodies = out
        end
      elsif r.status == 404
        if Utils.match_content_type(content_type, 'application/json')
          out = Crystalline.unmarshal_json(JSON.parse(r.env.response_body), ::GustoEmbedded::Shared::UnprocessableEntityErrorObject)
          res.unprocessable_entity_error_object = out
        end
      end

      res
    end


    sig { params(employee_id: ::String, request_body: ::GustoEmbedded::Operations::PostV1EmployeesEmployeeIdRecurringReimbursementsRequestBody, x_gusto_api_version: T.nilable(::GustoEmbedded::Operations::PostV1EmployeesEmployeeIdRecurringReimbursementsHeaderXGustoAPIVersion)).returns(::GustoEmbedded::Operations::PostV1EmployeesEmployeeIdRecurringReimbursementsResponse) }
    def post_v1_employees_employee_id_recurring_reimbursements(employee_id, request_body, x_gusto_api_version = nil)
      # post_v1_employees_employee_id_recurring_reimbursements - Create a recurring reimbursement
      # Create a recurring reimbursement for an employee.
      # 
      # scope: `reimbursements:write`
      # 
      request = ::GustoEmbedded::Operations::PostV1EmployeesEmployeeIdRecurringReimbursementsRequest.new(
        
        employee_id: employee_id,
        request_body: request_body,
        x_gusto_api_version: x_gusto_api_version
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::GustoEmbedded::Operations::PostV1EmployeesEmployeeIdRecurringReimbursementsRequest,
        base_url,
        '/v1/employees/{employee_id}/recurring_reimbursements',
        request
      )
      headers = Utils.get_headers(request)
      req_content_type, data, form = Utils.serialize_request_body(request, :request_body, :json)
      headers['content-type'] = req_content_type
      raise StandardError, 'request body is required' if data.nil? && form.nil?
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.post(url) do |req|
        req.headers = headers
        security = !@sdk_configuration.nil? && !@sdk_configuration.security_source.nil? ? @sdk_configuration.security_source.call : nil
        Utils.configure_request_security(req, security) if !security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::GustoEmbedded::Operations::PostV1EmployeesEmployeeIdRecurringReimbursementsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 201
        if Utils.match_content_type(content_type, 'application/json')
          out = Crystalline.unmarshal_json(JSON.parse(r.env.response_body), ::GustoEmbedded::Operations::PostV1EmployeesEmployeeIdRecurringReimbursementsResponseBody)
          res.object = out
        end
      elsif [404, 422].include?(r.status)
        if Utils.match_content_type(content_type, 'application/json')
          out = Crystalline.unmarshal_json(JSON.parse(r.env.response_body), ::GustoEmbedded::Shared::UnprocessableEntityErrorObject)
          res.unprocessable_entity_error_object = out
        end
      end

      res
    end


    sig { params(id: ::String, x_gusto_api_version: T.nilable(::GustoEmbedded::Operations::GetV1RecurringReimbursementsHeaderXGustoAPIVersion)).returns(::GustoEmbedded::Operations::GetV1RecurringReimbursementsResponse) }
    def get_v1_recurring_reimbursements(id, x_gusto_api_version = nil)
      # get_v1_recurring_reimbursements - Get a recurring reimbursement
      # Get a specific recurring reimbursement.
      # 
      # scope: `reimbursements:read`
      # 
      request = ::GustoEmbedded::Operations::GetV1RecurringReimbursementsRequest.new(
        
        id: id,
        x_gusto_api_version: x_gusto_api_version
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::GustoEmbedded::Operations::GetV1RecurringReimbursementsRequest,
        base_url,
        '/v1/recurring_reimbursements/{id}',
        request
      )
      headers = Utils.get_headers(request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        security = !@sdk_configuration.nil? && !@sdk_configuration.security_source.nil? ? @sdk_configuration.security_source.call : nil
        Utils.configure_request_security(req, security) if !security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::GustoEmbedded::Operations::GetV1RecurringReimbursementsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Crystalline.unmarshal_json(JSON.parse(r.env.response_body), ::GustoEmbedded::Operations::GetV1RecurringReimbursementsResponseBody)
          res.object = out
        end
      elsif r.status == 404
        if Utils.match_content_type(content_type, 'application/json')
          out = Crystalline.unmarshal_json(JSON.parse(r.env.response_body), ::GustoEmbedded::Shared::UnprocessableEntityErrorObject)
          res.unprocessable_entity_error_object = out
        end
      end

      res
    end


    sig { params(id: ::String, request_body: ::GustoEmbedded::Operations::PutV1RecurringReimbursementsRequestBody, x_gusto_api_version: T.nilable(::GustoEmbedded::Operations::PutV1RecurringReimbursementsHeaderXGustoAPIVersion)).returns(::GustoEmbedded::Operations::PutV1RecurringReimbursementsResponse) }
    def put_v1_recurring_reimbursements(id, request_body, x_gusto_api_version = nil)
      # put_v1_recurring_reimbursements - Update a recurring reimbursement
      # Update a recurring reimbursement.
      # 
      # scope: `reimbursements:write`
      # 
      request = ::GustoEmbedded::Operations::PutV1RecurringReimbursementsRequest.new(
        
        id: id,
        request_body: request_body,
        x_gusto_api_version: x_gusto_api_version
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::GustoEmbedded::Operations::PutV1RecurringReimbursementsRequest,
        base_url,
        '/v1/recurring_reimbursements/{id}',
        request
      )
      headers = Utils.get_headers(request)
      req_content_type, data, form = Utils.serialize_request_body(request, :request_body, :json)
      headers['content-type'] = req_content_type
      raise StandardError, 'request body is required' if data.nil? && form.nil?
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.put(url) do |req|
        req.headers = headers
        security = !@sdk_configuration.nil? && !@sdk_configuration.security_source.nil? ? @sdk_configuration.security_source.call : nil
        Utils.configure_request_security(req, security) if !security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::GustoEmbedded::Operations::PutV1RecurringReimbursementsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Crystalline.unmarshal_json(JSON.parse(r.env.response_body), ::GustoEmbedded::Operations::PutV1RecurringReimbursementsResponseBody)
          res.object = out
        end
      elsif [404, 409, 422].include?(r.status)
        if Utils.match_content_type(content_type, 'application/json')
          out = Crystalline.unmarshal_json(JSON.parse(r.env.response_body), ::GustoEmbedded::Shared::UnprocessableEntityErrorObject)
          res.unprocessable_entity_error_object = out
        end
      end

      res
    end


    sig { params(id: ::String, x_gusto_api_version: T.nilable(::GustoEmbedded::Operations::DeleteV1RecurringReimbursementsHeaderXGustoAPIVersion)).returns(::GustoEmbedded::Operations::DeleteV1RecurringReimbursementsResponse) }
    def delete_v1_recurring_reimbursements(id, x_gusto_api_version = nil)
      # delete_v1_recurring_reimbursements - Delete a recurring reimbursement
      # Delete (soft delete) a recurring reimbursement for an employee.
      # 
      # scope: `reimbursements:write`
      # 
      request = ::GustoEmbedded::Operations::DeleteV1RecurringReimbursementsRequest.new(
        
        id: id,
        x_gusto_api_version: x_gusto_api_version
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::GustoEmbedded::Operations::DeleteV1RecurringReimbursementsRequest,
        base_url,
        '/v1/recurring_reimbursements/{id}',
        request
      )
      headers = Utils.get_headers(request)
      headers['Accept'] = '*/*'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.delete(url) do |req|
        req.headers = headers
        security = !@sdk_configuration.nil? && !@sdk_configuration.security_source.nil? ? @sdk_configuration.security_source.call : nil
        Utils.configure_request_security(req, security) if !security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::GustoEmbedded::Operations::DeleteV1RecurringReimbursementsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 204
      elsif r.status == 404
      end

      res
    end
  end
end
