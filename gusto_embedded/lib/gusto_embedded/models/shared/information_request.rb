# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module GustoEmbedded
  module Shared
  
    # Representation of an information request
    class InformationRequest < ::Crystalline::FieldAugmented
      extend T::Sig

      # If true, this information request is blocking payroll, and may require response or requires review from our Risk Ops team.
      field :blocking_payroll, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('blocking_payroll') } }
      # Unique identifier of the company to which the information requests belongs
      field :company_uuid, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('company_uuid') } }
      # The status of the information request
      field :status, T.nilable(::GustoEmbedded::Shared::InformationRequestStatus), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('status'), 'decoder': Utils.enum_from_string(::GustoEmbedded::Shared::InformationRequestStatus, true) } }
      # The type of information request
      field :type, T.nilable(::GustoEmbedded::Shared::InformationRequestType), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('type'), 'decoder': Utils.enum_from_string(::GustoEmbedded::Shared::InformationRequestType, true) } }
      # Unique identifier of an information request
      field :uuid, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('uuid') } }


      sig { params(blocking_payroll: T.nilable(T::Boolean), company_uuid: T.nilable(::String), status: T.nilable(::GustoEmbedded::Shared::InformationRequestStatus), type: T.nilable(::GustoEmbedded::Shared::InformationRequestType), uuid: T.nilable(::String)).void }
      def initialize(blocking_payroll: nil, company_uuid: nil, status: nil, type: nil, uuid: nil)
        @blocking_payroll = blocking_payroll
        @company_uuid = company_uuid
        @status = status
        @type = type
        @uuid = uuid
      end
    end
  end
end
