# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module GustoEmbedded
  module Shared
  
    # Representation of a Time Off Policy
    class TimeOffPolicy < ::Crystalline::FieldAugmented
      extend T::Sig

      # Policy time off accrual method
      field :accrual_method, ::String, { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('accrual_method') } }
      # Unique identifier for the company owning the time off policy
      field :company_uuid, ::String, { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('company_uuid') } }
      # List of employee UUIDs under a time off policy
      field :employees, T::Array[::GustoEmbedded::Shared::TimeOffPolicyEmployees], { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('employees') } }
      # boolean representing if a policy is active or not
      field :is_active, T::Boolean, { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('is_active') } }
      # Name of the time off policy
      field :name, ::String, { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('name') } }
      # Type of the time off policy
      field :policy_type, ::GustoEmbedded::Shared::PolicyType, { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('policy_type'), 'decoder': Utils.enum_from_string(::GustoEmbedded::Shared::PolicyType, false) } }
      # Unique identifier of a time off policy
      field :uuid, ::String, { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('uuid') } }
      # The rate at which the time off hours will accrue for an employee on the policy. Represented as a float, e.g. "40.0".
      field :accrual_rate, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('accrual_rate') } }
      # The number of hours an employee has to work or be paid for to accrue the number of hours set in the accrual rate. Only used for hourly policies (per_hour_paid, per_hour_paid_no_overtime, per_hour_work, per_hour_worked_no_overtime). Represented as a float, e.g. "40.0".
      field :accrual_rate_unit, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('accrual_rate_unit') } }
      # Number of days before an employee on the policy will begin accruing time off hours
      field :accrual_waiting_period_days, T.nilable(::Integer), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('accrual_waiting_period_days') } }
      # The max number of hours an employee can carryover from one year to the next
      field :carryover_limit_hours, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('carryover_limit_hours') } }
      # boolean representing if a policy has completed configuration
      field :complete, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('complete') } }
      # The max number of hours an employee can accrue in a year
      field :max_accrual_hours_per_year, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('max_accrual_hours_per_year') } }
      # The max number of hours an employee can accrue
      field :max_hours, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('max_hours') } }
      # Boolean representing if an employee's accrued time off hours will be paid out on termination
      field :paid_out_on_termination, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('paid_out_on_termination') } }
      # The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field.
      field :version, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('version') } }


      sig { params(accrual_method: ::String, company_uuid: ::String, employees: T::Array[::GustoEmbedded::Shared::TimeOffPolicyEmployees], is_active: T::Boolean, name: ::String, policy_type: ::GustoEmbedded::Shared::PolicyType, uuid: ::String, accrual_rate: T.nilable(::String), accrual_rate_unit: T.nilable(::String), accrual_waiting_period_days: T.nilable(::Integer), carryover_limit_hours: T.nilable(::String), complete: T.nilable(T::Boolean), max_accrual_hours_per_year: T.nilable(::String), max_hours: T.nilable(::String), paid_out_on_termination: T.nilable(T::Boolean), version: T.nilable(::String)).void }
      def initialize(accrual_method: nil, company_uuid: nil, employees: nil, is_active: nil, name: nil, policy_type: nil, uuid: nil, accrual_rate: nil, accrual_rate_unit: nil, accrual_waiting_period_days: nil, carryover_limit_hours: nil, complete: nil, max_accrual_hours_per_year: nil, max_hours: nil, paid_out_on_termination: nil, version: nil)
        @accrual_method = accrual_method
        @company_uuid = company_uuid
        @employees = employees
        @is_active = is_active
        @name = name
        @policy_type = policy_type
        @uuid = uuid
        @accrual_rate = accrual_rate
        @accrual_rate_unit = accrual_rate_unit
        @accrual_waiting_period_days = accrual_waiting_period_days
        @carryover_limit_hours = carryover_limit_hours
        @complete = complete
        @max_accrual_hours_per_year = max_accrual_hours_per_year
        @max_hours = max_hours
        @paid_out_on_termination = paid_out_on_termination
        @version = version
      end
    end
  end
end
