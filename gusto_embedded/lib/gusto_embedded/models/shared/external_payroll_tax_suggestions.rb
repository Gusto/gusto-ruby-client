# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module GustoEmbedded
  module Shared
  
    # The representation of an external payroll with minimal information.
    class ExternalPayrollTaxSuggestions < ::Crystalline::FieldAugmented
      extend T::Sig

      # The UUID of the employee.
      field :employee_uuid, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('employee_uuid') } }
      # Possible tax liabilities selections.
      field :tax_suggestions, T.nilable(T::Array[::GustoEmbedded::Shared::TaxSuggestions]), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('tax_suggestions') } }


      sig { params(employee_uuid: T.nilable(::String), tax_suggestions: T.nilable(T::Array[::GustoEmbedded::Shared::TaxSuggestions])).void }
      def initialize(employee_uuid: nil, tax_suggestions: nil)
        @employee_uuid = employee_uuid
        @tax_suggestions = tax_suggestions
      end
    end
  end
end
