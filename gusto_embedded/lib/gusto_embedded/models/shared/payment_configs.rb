# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module GustoEmbedded
  module Shared
  
    # Example response
    class PaymentConfigs < ::Crystalline::FieldAugmented
      extend T::Sig

      # Company uuid
      field :company_uuid, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('company_uuid') } }
      # Payment limit for 1-day or 2-day payroll
      field :fast_payment_limit, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('fast_payment_limit') } }
      # Partner uuid
      field :partner_uuid, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('partner_uuid') } }
      # Payment speed for 1-day, 2-day, 4-day
      field :payment_speed, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('payment_speed') } }


      sig { params(company_uuid: T.nilable(::String), fast_payment_limit: T.nilable(::String), partner_uuid: T.nilable(::String), payment_speed: T.nilable(::String)).void }
      def initialize(company_uuid: nil, fast_payment_limit: nil, partner_uuid: nil, payment_speed: nil)
        @company_uuid = company_uuid
        @fast_payment_limit = fast_payment_limit
        @partner_uuid = partner_uuid
        @payment_speed = payment_speed
      end
    end
  end
end
