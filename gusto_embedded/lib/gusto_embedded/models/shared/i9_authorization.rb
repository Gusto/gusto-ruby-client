# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module GustoEmbedded
  module Shared
  
    # An employee's I-9 authorization
    class I9Authorization < ::Crystalline::FieldAugmented
      extend T::Sig

      # The employee's authorization status
      field :authorization_status, ::GustoEmbedded::Shared::AuthorizationStatus, { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('authorization_status'), 'decoder': Utils.enum_from_string(::GustoEmbedded::Shared::AuthorizationStatus, false) } }
      # Whether the employee has signed the Form I-9
      field :employee_signed, T::Boolean, { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('employee_signed') } }
      # Whether the employer has signed the Form I-9
      field :employer_signed, T::Boolean, { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('employer_signed') } }
      # The UUID of the I-9 authorization
      field :uuid, ::String, { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('uuid') } }
      # The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
      field :version, ::String, { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('version') } }
      # Any additional notes
      field :additional_info, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('additional_info') } }
      # Whether an alternative procedure authorized by DHS to examine documents was used
      field :alt_procedure, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('alt_procedure') } }
      # The document's country of issuance
      field :country, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('country') } }
      # The document's document type
      field :document_type, T.nilable(::GustoEmbedded::Shared::I9AuthorizationDocumentType), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('document_type'), 'decoder': Utils.enum_from_string(::GustoEmbedded::Shared::I9AuthorizationDocumentType, true) } }
      # The document's expiration date
      field :expiration_date, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('expiration_date') } }
      # The UUID of the Form associated with this I-9 authorization. Use this with "Employee Forms" API endpoints.
      field :form_uuid, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('form_uuid') } }
      # Whether or not a `document_number` exists for this document.
      field :has_document_number, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('has_document_number') } }


      sig { params(authorization_status: ::GustoEmbedded::Shared::AuthorizationStatus, employee_signed: T::Boolean, employer_signed: T::Boolean, uuid: ::String, version: ::String, additional_info: T.nilable(::String), alt_procedure: T.nilable(T::Boolean), country: T.nilable(::String), document_type: T.nilable(::GustoEmbedded::Shared::I9AuthorizationDocumentType), expiration_date: T.nilable(::String), form_uuid: T.nilable(::String), has_document_number: T.nilable(T::Boolean)).void }
      def initialize(authorization_status: nil, employee_signed: nil, employer_signed: nil, uuid: nil, version: nil, additional_info: nil, alt_procedure: nil, country: nil, document_type: nil, expiration_date: nil, form_uuid: nil, has_document_number: nil)
        @authorization_status = authorization_status
        @employee_signed = employee_signed
        @employer_signed = employer_signed
        @uuid = uuid
        @version = version
        @additional_info = additional_info
        @alt_procedure = alt_procedure
        @country = country
        @document_type = document_type
        @expiration_date = expiration_date
        @form_uuid = form_uuid
        @has_document_number = has_document_number
      end
    end
  end
end
