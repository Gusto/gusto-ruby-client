# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module GustoEmbedded
  module Shared
  
    # Ytd Benefit Amounts From Different Company
    class YtdBenefitAmountsFromDifferentCompany < ::Crystalline::FieldAugmented
      extend T::Sig

      # The benefit type supported by Gusto. See [Benefit Types](https://docs.gusto.com/embedded-payroll/reference/get-v1-benefits) for more information.
      field :benefit_type, ::Integer, { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('benefit_type') } }
      # The unique identifier for this benefit amount record.
      field :uuid, ::String, { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('uuid') } }
      # The year-to-date company contribution made outside the current company.
      field :ytd_company_contribution_amount, ::String, { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('ytd_company_contribution_amount') } }
      # The year-to-date employee deduction made outside the current company.
      field :ytd_employee_deduction_amount, ::String, { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('ytd_employee_deduction_amount') } }


      sig { params(benefit_type: ::Integer, uuid: ::String, ytd_company_contribution_amount: ::String, ytd_employee_deduction_amount: ::String).void }
      def initialize(benefit_type: nil, uuid: nil, ytd_company_contribution_amount: nil, ytd_employee_deduction_amount: nil)
        @benefit_type = benefit_type
        @uuid = uuid
        @ytd_company_contribution_amount = ytd_company_contribution_amount
        @ytd_employee_deduction_amount = ytd_employee_deduction_amount
      end
    end
  end
end
