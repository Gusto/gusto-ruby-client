# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module GustoEmbedded
  module Shared
  

    class Splits < ::Crystalline::FieldAugmented
      extend T::Sig


      field :account_type, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('account_type') } }

      field :bank_account_uuid, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('bank_account_uuid') } }
      # Ciphertext containing the full bank account number, which must be decrypted using a key provided by Gusto. Only visible with the `contractor_payment_methods:read:account_number` scope.
      field :encrypted_account_number, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('encrypted_account_number') } }
      # An obfuscated version of the account number which can be used for display purposes.
      field :hidden_account_number, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('hidden_account_number') } }

      field :name, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('name') } }
      # The order of priority for each payment split, with priority 1 being the first bank account paid. Priority must be unique and sequential.
      field :priority, T.nilable(::Integer), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('priority') } }

      field :routing_number, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('routing_number') } }

      field :split_amount, T.nilable(::Float), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('split_amount') } }


      sig { params(account_type: T.nilable(::String), bank_account_uuid: T.nilable(::String), encrypted_account_number: T.nilable(::String), hidden_account_number: T.nilable(::String), name: T.nilable(::String), priority: T.nilable(::Integer), routing_number: T.nilable(::String), split_amount: T.nilable(::Float)).void }
      def initialize(account_type: nil, bank_account_uuid: nil, encrypted_account_number: nil, hidden_account_number: nil, name: nil, priority: nil, routing_number: nil, split_amount: nil)
        @account_type = account_type
        @bank_account_uuid = bank_account_uuid
        @encrypted_account_number = encrypted_account_number
        @hidden_account_number = hidden_account_number
        @name = name
        @priority = priority
        @routing_number = routing_number
        @split_amount = split_amount
      end
    end
  end
end
