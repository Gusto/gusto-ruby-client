# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module GustoEmbedded
  module Shared
  

    class ApplicableBenefits < ::Crystalline::FieldAugmented
      extend T::Sig


      field :active, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('active') } }

      field :description, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('description') } }

      field :id, T.nilable(::Integer), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('id') } }


      sig { params(active: T.nilable(T::Boolean), description: T.nilable(::String), id: T.nilable(::Integer)).void }
      def initialize(active: nil, description: nil, id: nil)
        @active = active
        @description = description
        @id = id
      end
    end
  end
end
