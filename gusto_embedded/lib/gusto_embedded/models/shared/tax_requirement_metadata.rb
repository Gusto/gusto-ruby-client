# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module GustoEmbedded
  module Shared
  

    class TaxRequirementMetadata < ::Crystalline::FieldAugmented
      extend T::Sig

      # Describes the type of requirement - each type may have additional metadata properties to describe possible values, formats, etc.
      # 
      # - `text`: free-text input, no additional requirements
      # - `currency`: a value representing a dollar amount, e.g. `374.55` representing `$374.55`
      # - `radio`: choose one of options provided, see `options`
      # - `select`: choose one of options provided, see `options`
      # - `percent`: A decimal value representing a percentage, e.g. `0.034` representing `3.4%`
      # - `account_number`: An account number for a tax agency, more information provided by `mask` and `prefix`
      # - `tax_rate`: A decimal value representing a tax rate, e.g. `0.034` representing a tax rate of `3.4%`, see `validation` for additional validation guidance
      # - `workers_compensation_rate`: A decimal value representing a percentage, see `risk_class_code`, `risk_class_description`, and `rate_type`
      # 
      field :type, ::GustoEmbedded::Shared::TaxRequirementMetadataType, { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('type'), 'decoder': Utils.enum_from_string(::GustoEmbedded::Shared::TaxRequirementMetadataType, false) } }
      # [for `account_number`] A pattern describing the format of the account number
      # 
      # The mask is a sequence of characters representing the requirements of the actual account number. Each character in the mask represents a single character in the account number as follows:
      # - `#`: a digit (`\d`)
      # - `@`: a upper or lower case letter (`[a-zA-Z]`)
      # - `^`: an uppercase letter (`[A-Z]`)
      # - `%`: a digit or uppercase letter (`[0-9A-Z]`)
      # - any other character represents the literal character
      # 
      # Examples:
      # - mask: `WHT-######` represents `WHT-` followed by 5 digits, e.g. `WHT-33421`
      # - mask: `%####-^^` supports values of `75544-AB` and `Z7654-HK`
      # 
      field :mask, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('mask') } }
      # [for `select` or `radio`] An array of objects describing the possible values.
      field :options, T.nilable(T::Array[::GustoEmbedded::Shared::TaxRequirementMetadataOptions]), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('options') } }
      # [for `account_number`] A value that precedes the value to be collected - useful for display, but should not be submitted as part of the value. E.g. some tax agencies use an account number that is a company's federal ein plus two digits. In that case the mask would be `##` and the prefix `XXXXX1234`.
      field :prefix, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('prefix') } }
      # [for `workers_compensation_rate`] The type of rate being collected. Either:
      #   - `percent`: A percentage formatted as a decimal, e.g. `0.01` for 1%
      #   - `currency_per_hour`: A dollar amount per hour, e.g. `3.24` for $3.24/hr
      # 
      field :rate_type, T.nilable(::GustoEmbedded::Shared::RateType), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('rate_type'), 'decoder': Utils.enum_from_string(::GustoEmbedded::Shared::RateType, true) } }
      # [for `workers_compensation_rate`] The industry risk class code for the rate being requested
      field :risk_class_code, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('risk_class_code') } }
      # [for `workers_compensation_rate`] A description of the industry risk class for the rate being requested
      field :risk_class_description, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('risk_class_description') } }
      # [for `tax_rate`] Describes the validation required for the tax rate
      field :validation, T.nilable(::GustoEmbedded::Shared::Validation), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('validation') } }


      sig { params(type: ::GustoEmbedded::Shared::TaxRequirementMetadataType, mask: T.nilable(::String), options: T.nilable(T::Array[::GustoEmbedded::Shared::TaxRequirementMetadataOptions]), prefix: T.nilable(::String), rate_type: T.nilable(::GustoEmbedded::Shared::RateType), risk_class_code: T.nilable(::String), risk_class_description: T.nilable(::String), validation: T.nilable(::GustoEmbedded::Shared::Validation)).void }
      def initialize(type: nil, mask: nil, options: nil, prefix: nil, rate_type: nil, risk_class_code: nil, risk_class_description: nil, validation: nil)
        @type = type
        @mask = mask
        @options = options
        @prefix = prefix
        @rate_type = rate_type
        @risk_class_code = risk_class_code
        @risk_class_description = risk_class_description
        @validation = validation
      end
    end
  end
end
