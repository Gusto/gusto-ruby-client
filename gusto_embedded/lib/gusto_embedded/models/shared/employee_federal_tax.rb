# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module GustoEmbedded
  module Shared
  
    # Example response
    class EmployeeFederalTax < ::Crystalline::FieldAugmented
      extend T::Sig

      # Deductions other than the standard deduction to reduce withholding.
      field :deductions, ::String, { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('deductions') } }
      # A dependent is a person other than the taxpayer or spouse who entitles the taxpayer to claim a dependency exemption.
      field :dependents_amount, ::String, { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('dependents_amount') } }
      # An employee can request an additional amount to be withheld from each paycheck.
      field :extra_withholding, ::String, { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('extra_withholding') } }
      # It determines which tax return form an individual will use and is an important factor in computing taxable income. One of:
      # - Single
      # - Married
      # - Head of Household
      # - Exempt from withholding
      # - Married, but withhold as Single (does not apply to rev_2020_w4 form)
      field :filing_status, ::String, { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('filing_status') } }
      # Other income amount.
      field :other_income, ::String, { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('other_income') } }
      # If there are only two jobs (i.e., you and your spouse each have a job, or you have two), you can set it to true.
      field :two_jobs, T::Boolean, { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('two_jobs') } }
      # The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
      field :version, ::String, { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('version') } }
      # The version of w4 form.
      field :w4_data_type, ::GustoEmbedded::Shared::W4DataType, { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('w4_data_type'), 'decoder': Utils.enum_from_string(::GustoEmbedded::Shared::W4DataType, false) } }
      # *does not apply to rev_2020_w4 form*
      field :additional_withholding, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('additional_withholding') } }
      # *does not apply to rev_2020_w4 form*
      # 
      # An exemption from paying a certain amount of income tax.
      field :federal_withholding_allowance, T.nilable(::Float), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('federal_withholding_allowance') } }


      sig { params(deductions: ::String, dependents_amount: ::String, extra_withholding: ::String, filing_status: ::String, other_income: ::String, two_jobs: T::Boolean, version: ::String, w4_data_type: ::GustoEmbedded::Shared::W4DataType, additional_withholding: T.nilable(T::Boolean), federal_withholding_allowance: T.nilable(::Float)).void }
      def initialize(deductions: nil, dependents_amount: nil, extra_withholding: nil, filing_status: nil, other_income: nil, two_jobs: nil, version: nil, w4_data_type: nil, additional_withholding: nil, federal_withholding_allowance: nil)
        @deductions = deductions
        @dependents_amount = dependents_amount
        @extra_withholding = extra_withholding
        @filing_status = filing_status
        @other_income = other_income
        @two_jobs = two_jobs
        @version = version
        @w4_data_type = w4_data_type
        @additional_withholding = additional_withholding
        @federal_withholding_allowance = federal_withholding_allowance
      end
    end
  end
end
