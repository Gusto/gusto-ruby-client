# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module GustoEmbedded
  module Shared
  
    # The representation of an employee pay stub information.
    class EmployeePayStub < ::Crystalline::FieldAugmented
      extend T::Sig

      # The UUID of the employee pay stub.
      field :uuid, ::String, { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('uuid') } }
      # The check amount for the pay stub.
      field :check_amount, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('check_amount') } }
      # The check date of the pay stub.
      field :check_date, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('check_date') } }
      # The gross pay amount for the pay stub.
      field :gross_pay, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('gross_pay') } }
      # The net pay amount for the pay stub.
      field :net_pay, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('net_pay') } }
      # A unique identifier of the payroll to which the pay stub belongs.
      field :payroll_uuid, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('payroll_uuid') } }


      sig { params(uuid: ::String, check_amount: T.nilable(::String), check_date: T.nilable(::String), gross_pay: T.nilable(::String), net_pay: T.nilable(::String), payroll_uuid: T.nilable(::String)).void }
      def initialize(uuid: nil, check_amount: nil, check_date: nil, gross_pay: nil, net_pay: nil, payroll_uuid: nil)
        @uuid = uuid
        @check_amount = check_amount
        @check_date = check_date
        @gross_pay = gross_pay
        @net_pay = net_pay
        @payroll_uuid = payroll_uuid
      end
    end
  end
end
