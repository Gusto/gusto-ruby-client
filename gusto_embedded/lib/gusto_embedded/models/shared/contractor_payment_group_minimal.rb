# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module GustoEmbedded
  module Shared
  
    # The summary of a contractor payment group.
    class ContractorPaymentGroupMinimal < ::Crystalline::FieldAugmented
      extend T::Sig

      # The check date of the contractor payment group.
      field :check_date, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('check_date') } }
      # The UUID of the company.
      field :company_uuid, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('company_uuid') } }
      # Token used to make contractor payment group creation idempotent.  Will error if attempting to create a group with a duplicate token.
      field :creation_token, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('creation_token') } }
      # The debit date of the contractor payment group.
      field :debit_date, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('debit_date') } }
      # The status of the contractor payment group.  Will be `Funded` if all payments that should be funded (i.e. have `Direct Deposit` for payment method) are funded.  A group can have status `Funded` while having associated payments that have status `Unfunded`, i.e. payment with `Check` payment method.
      field :status, T.nilable(::GustoEmbedded::Shared::ContractorPaymentGroupMinimalStatus), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('status'), 'decoder': Utils.enum_from_string(::GustoEmbedded::Shared::ContractorPaymentGroupMinimalStatus, true) } }

      field :totals, T.nilable(::GustoEmbedded::Shared::ContractorPaymentGroupMinimalTotals), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('totals') } }
      # The unique identifier of the contractor payment group.
      field :uuid, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('uuid') } }


      sig { params(check_date: T.nilable(::String), company_uuid: T.nilable(::String), creation_token: T.nilable(::String), debit_date: T.nilable(::String), status: T.nilable(::GustoEmbedded::Shared::ContractorPaymentGroupMinimalStatus), totals: T.nilable(::GustoEmbedded::Shared::ContractorPaymentGroupMinimalTotals), uuid: T.nilable(::String)).void }
      def initialize(check_date: nil, company_uuid: nil, creation_token: nil, debit_date: nil, status: nil, totals: nil, uuid: nil)
        @check_date = check_date
        @company_uuid = company_uuid
        @creation_token = creation_token
        @debit_date = debit_date
        @status = status
        @totals = totals
        @uuid = uuid
      end
    end
  end
end
