# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module GustoEmbedded
  module Shared
  

    class Resources < ::Crystalline::FieldAugmented
      extend T::Sig

      # The type of entity being described, could be “Contractor”, “Employee”, “BankAccount”, “Payroll”, “ContractorPayment”, “RecoveryCase”, or “Signatory”
      field :entity_type, ::String, { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('entity_type') } }
      # Unique identifier of the entity
      field :entity_uuid, ::String, { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('entity_uuid') } }
      # Optional. The type of a resource that is related to the one described by entity_type and entity_uuid. For instance, if the entity_type is “BankAccount”, the reference_type could be the “Employee” or “Contractor” to whom the bank account belongs.
      field :reference_type, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('reference_type') } }
      # Optional. Unique identifier of the reference.
      field :reference_uuid, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('reference_uuid') } }


      sig { params(entity_type: ::String, entity_uuid: ::String, reference_type: T.nilable(::String), reference_uuid: T.nilable(::String)).void }
      def initialize(entity_type: nil, entity_uuid: nil, reference_type: nil, reference_uuid: nil)
        @entity_type = entity_type
        @entity_uuid = entity_uuid
        @reference_type = reference_type
        @reference_uuid = reference_uuid
      end
    end
  end
end
