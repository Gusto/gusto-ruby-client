# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module GustoEmbedded
  module Shared
  
    # Example response
    class Notification < ::Crystalline::FieldAugmented
      extend T::Sig

      # Indicates whether a notification requires action or not. If false, the notification provides critical information only.
      field :actionable, T::Boolean, { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('actionable') } }
      # Indicates whether a notification may block ability to run payroll. If true, we suggest that these notifications are prioritized to your end users.
      field :can_block_payroll, T::Boolean, { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('can_block_payroll') } }
      # The notification's category.
      field :category, ::String, { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('category') } }
      # Unique identifier of the company to which the notification belongs.
      field :company_uuid, ::String, { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('company_uuid') } }
      # Timestamp of when the notification is due. If the notification has no due date, this field will be null.
      field :due_at, ::String, { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('due_at') } }
      # The message of the notification. This provides additional context for the user and recommends a specific action to resolve the notification.
      field :message, ::String, { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('message') } }
      # Timestamp of when the notification was published.
      field :published_at, ::String, { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('published_at') } }
      # An array of entities relevant to the notification
      field :resources, T::Array[::GustoEmbedded::Shared::Resources], { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('resources') } }
      # Represents the notification's status as managed by our system. It is updated based on observable system events and internal business logic, and does not reflect resolution steps taken outside our system. This field is read-only and cannot be modified via the API.
      field :status, ::GustoEmbedded::Shared::NotificationStatus, { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('status'), 'decoder': Utils.enum_from_string(::GustoEmbedded::Shared::NotificationStatus, false) } }
      # The title of the notification. This highlights the actionable component of the notification.
      field :title, ::String, { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('title') } }
      # Unique identifier of a notification.
      field :uuid, ::String, { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('uuid') } }
      # An object containing template variables used to render the notification. The structure of this object depends on the notification category. Each category defines a fixed set of variable names (keys), which are always present. The values of these variables can vary depending on the specific notification instance.
      field :template_variables, T.nilable(T::Hash[Symbol, ::String]), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('template_variables') } }


      sig { params(actionable: T::Boolean, can_block_payroll: T::Boolean, category: ::String, company_uuid: ::String, due_at: ::String, message: ::String, published_at: ::String, resources: T::Array[::GustoEmbedded::Shared::Resources], status: ::GustoEmbedded::Shared::NotificationStatus, title: ::String, uuid: ::String, template_variables: T.nilable(T::Hash[Symbol, ::String])).void }
      def initialize(actionable: nil, can_block_payroll: nil, category: nil, company_uuid: nil, due_at: nil, message: nil, published_at: nil, resources: nil, status: nil, title: nil, uuid: nil, template_variables: nil)
        @actionable = actionable
        @can_block_payroll = can_block_payroll
        @category = category
        @company_uuid = company_uuid
        @due_at = due_at
        @message = message
        @published_at = published_at
        @resources = resources
        @status = status
        @title = title
        @uuid = uuid
        @template_variables = template_variables
      end
    end
  end
end
