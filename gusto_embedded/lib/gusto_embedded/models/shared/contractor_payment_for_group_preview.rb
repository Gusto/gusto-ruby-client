# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module GustoEmbedded
  module Shared
  
    # Preview representation of a single contractor payment with nullable uuid.
    class ContractorPaymentForGroupPreview < ::Crystalline::FieldAugmented
      extend T::Sig

      # The bonus amount in the payment.
      field :bonus, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('bonus') } }
      # The UUID of the contractor.
      field :contractor_uuid, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('contractor_uuid') } }
      # The rate per hour worked for the payment.
      field :hourly_rate, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('hourly_rate') } }
      # The number of hours worked for the payment.
      field :hours, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('hours') } }
      # Determine if the contractor payment can be cancelled.
      field :may_cancel, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('may_cancel') } }
      # The payment method.
      field :payment_method, T.nilable(::GustoEmbedded::Shared::ContractorPaymentForGroupPreviewPaymentMethod), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('payment_method'), 'decoder': Utils.enum_from_string(::GustoEmbedded::Shared::ContractorPaymentForGroupPreviewPaymentMethod, true) } }
      # The reimbursement amount in the payment.
      field :reimbursement, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('reimbursement') } }
      # The status of the contractor payment.  Will transition to `Funded` during payments processing if the payment should be funded, i.e. has `Direct Deposit` for payment method. Contractors payments with `Check` payment method will remain `Unfunded`.
      field :status, T.nilable(::GustoEmbedded::Shared::ContractorPaymentForGroupPreviewStatus), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('status'), 'decoder': Utils.enum_from_string(::GustoEmbedded::Shared::ContractorPaymentForGroupPreviewStatus, true) } }
      # The unique identifier of the contractor payment in Gusto.
      field :uuid, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('uuid') } }
      # The fixed wage of the payment, regardless of hours worked.
      field :wage, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('wage') } }
      # (hours * hourly_rate) + wage + bonus
      field :wage_total, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('wage_total') } }
      # The wage type for the payment.
      field :wage_type, T.nilable(::GustoEmbedded::Shared::ContractorPaymentForGroupPreviewWageType), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('wage_type'), 'decoder': Utils.enum_from_string(::GustoEmbedded::Shared::ContractorPaymentForGroupPreviewWageType, true) } }


      sig { params(bonus: T.nilable(::String), contractor_uuid: T.nilable(::String), hourly_rate: T.nilable(::String), hours: T.nilable(::String), may_cancel: T.nilable(T::Boolean), payment_method: T.nilable(::GustoEmbedded::Shared::ContractorPaymentForGroupPreviewPaymentMethod), reimbursement: T.nilable(::String), status: T.nilable(::GustoEmbedded::Shared::ContractorPaymentForGroupPreviewStatus), uuid: T.nilable(::String), wage: T.nilable(::String), wage_total: T.nilable(::String), wage_type: T.nilable(::GustoEmbedded::Shared::ContractorPaymentForGroupPreviewWageType)).void }
      def initialize(bonus: nil, contractor_uuid: nil, hourly_rate: nil, hours: nil, may_cancel: nil, payment_method: nil, reimbursement: nil, status: nil, uuid: nil, wage: nil, wage_total: nil, wage_type: nil)
        @bonus = bonus
        @contractor_uuid = contractor_uuid
        @hourly_rate = hourly_rate
        @hours = hours
        @may_cancel = may_cancel
        @payment_method = payment_method
        @reimbursement = reimbursement
        @status = status
        @uuid = uuid
        @wage = wage
        @wage_total = wage_total
        @wage_type = wage_type
      end
    end
  end
end
