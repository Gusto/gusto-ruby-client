# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module GustoEmbedded
  module Shared
  

    class TaxRequirementMetadataOptions < ::Crystalline::FieldAugmented
      extend T::Sig

      # A customer facing label for the answer
      field :label, ::String, { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('label') } }
      # The actual value to be submitted
      field :value, ::Object, { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('value') } }
      # A less verbose label that may sometimes be available
      field :short_label, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('short_label') } }


      sig { params(label: ::String, value: ::Object, short_label: T.nilable(::String)).void }
      def initialize(label: nil, value: nil, short_label: nil)
        @label = label
        @value = value
        @short_label = short_label
      end
    end
  end
end
