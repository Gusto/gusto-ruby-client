# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module GustoEmbedded
  module Shared
  

    class EarnedFastAchBlockers < ::Crystalline::FieldAugmented
      extend T::Sig

      # The type of blocker
      field :blocker_type, T.nilable(::GustoEmbedded::Shared::BlockerType), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('blocker_type'), 'decoder': Utils.enum_from_string(::GustoEmbedded::Shared::BlockerType, true) } }
      # The threshold needed to unblock
      field :threshold, T.nilable(::Float), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('threshold') } }


      sig { params(blocker_type: T.nilable(::GustoEmbedded::Shared::BlockerType), threshold: T.nilable(::Float)).void }
      def initialize(blocker_type: nil, threshold: nil)
        @blocker_type = blocker_type
        @threshold = threshold
      end
    end
  end
end
