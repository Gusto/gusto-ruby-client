# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module GustoEmbedded
  module Shared
  
    # The representation of paid time off in Gusto.
    class PaidTimeOff < ::Crystalline::FieldAugmented
      extend T::Sig

      # The number of accrual units accrued.
      field :accrual_balance, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('accrual_balance') } }
      # The accrual method of the time off policy
      field :accrual_method, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('accrual_method') } }
      # The frequency at which the PTO type is accrued.
      field :accrual_period, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('accrual_period') } }
      # The number of accrual units accrued per accrual period.
      field :accrual_rate, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('accrual_rate') } }
      # The unit the PTO type is accrued in.
      field :accrual_unit, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('accrual_unit') } }
      # The maximum number of accrual units allowed. A null value signifies no maximum.
      field :maximum_accrual_balance, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('maximum_accrual_balance') } }
      # The name of the paid time off type.
      field :name, T.nilable(::GustoEmbedded::Shared::Name), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('name'), 'decoder': Utils.enum_from_string(::GustoEmbedded::Shared::Name, true) } }
      # Whether the accrual balance is paid to the employee upon termination.
      field :paid_at_termination, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('paid_at_termination') } }
      # The name of the time off policy.
      field :policy_name, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('policy_name') } }
      # The UUID of the time off policy.
      field :policy_uuid, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('policy_uuid') } }


      sig { params(accrual_balance: T.nilable(::String), accrual_method: T.nilable(::String), accrual_period: T.nilable(::String), accrual_rate: T.nilable(::String), accrual_unit: T.nilable(::String), maximum_accrual_balance: T.nilable(::String), name: T.nilable(::GustoEmbedded::Shared::Name), paid_at_termination: T.nilable(T::Boolean), policy_name: T.nilable(::String), policy_uuid: T.nilable(::String)).void }
      def initialize(accrual_balance: nil, accrual_method: nil, accrual_period: nil, accrual_rate: nil, accrual_unit: nil, maximum_accrual_balance: nil, name: nil, paid_at_termination: nil, policy_name: nil, policy_uuid: nil)
        @accrual_balance = accrual_balance
        @accrual_method = accrual_method
        @accrual_period = accrual_period
        @accrual_rate = accrual_rate
        @accrual_unit = accrual_unit
        @maximum_accrual_balance = maximum_accrual_balance
        @name = name
        @paid_at_termination = paid_at_termination
        @policy_name = policy_name
        @policy_uuid = policy_uuid
      end
    end
  end
end
