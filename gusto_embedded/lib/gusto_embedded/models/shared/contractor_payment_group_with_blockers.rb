# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module GustoEmbedded
  module Shared
  
    # Contractor payment group with submission and credit blockers, but without individual contractor payments.
    class ContractorPaymentGroupWithBlockers < ::Crystalline::FieldAugmented
      extend T::Sig

      # The check date of the contractor payment group.
      field :check_date, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('check_date') } }
      # The UUID of the company.
      field :company_uuid, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('company_uuid') } }
      # Token used to make contractor payment group creation idempotent.  Will error if attempting to create a group with a duplicate token.
      field :creation_token, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('creation_token') } }
      # List of credit blockers for the contractor payment group.
      field :credit_blockers, T.nilable(T::Array[T::Array[::GustoEmbedded::Shared::PayrollCreditBlockersType]]), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('credit_blockers') } }
      # The debit date of the contractor payment group.
      field :debit_date, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('debit_date') } }
      # Whether the disbursement is partner owned.
      field :partner_owned_disbursement, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('partner_owned_disbursement') } }
      # The status of the contractor payment group.  Will be `Funded` if all payments that should be funded (i.e. have `Direct Deposit` for payment method) are funded.  A group can have status `Funded` while having associated payments that have status `Unfunded`, i.e. payment with `Check` payment method.
      field :status, T.nilable(::GustoEmbedded::Shared::ContractorPaymentGroupWithBlockersStatus), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('status'), 'decoder': Utils.enum_from_string(::GustoEmbedded::Shared::ContractorPaymentGroupWithBlockersStatus, true) } }
      # List of submission blockers for the contractor payment group.
      field :submission_blockers, T.nilable(T::Array[T::Array[::GustoEmbedded::Shared::PayrollSubmissionBlockersType]]), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('submission_blockers') } }

      field :totals, T.nilable(::GustoEmbedded::Shared::ContractorPaymentGroupWithBlockersTotals), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('totals') } }
      # The unique identifier of the contractor payment group.
      field :uuid, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('uuid') } }


      sig { params(check_date: T.nilable(::String), company_uuid: T.nilable(::String), creation_token: T.nilable(::String), credit_blockers: T.nilable(T::Array[T::Array[::GustoEmbedded::Shared::PayrollCreditBlockersType]]), debit_date: T.nilable(::String), partner_owned_disbursement: T.nilable(T::Boolean), status: T.nilable(::GustoEmbedded::Shared::ContractorPaymentGroupWithBlockersStatus), submission_blockers: T.nilable(T::Array[T::Array[::GustoEmbedded::Shared::PayrollSubmissionBlockersType]]), totals: T.nilable(::GustoEmbedded::Shared::ContractorPaymentGroupWithBlockersTotals), uuid: T.nilable(::String)).void }
      def initialize(check_date: nil, company_uuid: nil, creation_token: nil, credit_blockers: nil, debit_date: nil, partner_owned_disbursement: nil, status: nil, submission_blockers: nil, totals: nil, uuid: nil)
        @check_date = check_date
        @company_uuid = company_uuid
        @creation_token = creation_token
        @credit_blockers = credit_blockers
        @debit_date = debit_date
        @partner_owned_disbursement = partner_owned_disbursement
        @status = status
        @submission_blockers = submission_blockers
        @totals = totals
        @uuid = uuid
      end
    end
  end
end
