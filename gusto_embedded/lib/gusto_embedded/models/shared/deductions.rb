# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module GustoEmbedded
  module Shared
  

    class Deductions < ::Crystalline::FieldAugmented
      extend T::Sig


      field :amount, T.nilable(::Float), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('amount') } }

      field :amount_type, T.nilable(::GustoEmbedded::Shared::AmountType), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('amount_type'), 'decoder': Utils.enum_from_string(::GustoEmbedded::Shared::AmountType, true) } }

      field :name, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('name') } }

      field :uuid, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('uuid') } }


      sig { params(amount: T.nilable(::Float), amount_type: T.nilable(::GustoEmbedded::Shared::AmountType), name: T.nilable(::String), uuid: T.nilable(::String)).void }
      def initialize(amount: nil, amount_type: nil, name: nil, uuid: nil)
        @amount = amount
        @amount_type = amount_type
        @name = name
        @uuid = uuid
      end
    end
  end
end
