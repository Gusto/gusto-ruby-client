# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module GustoEmbedded
  module Shared
  
    # The representation of an admin user in Gusto.
    class Admin < ::Crystalline::FieldAugmented
      extend T::Sig

      # The unique id of the admin.
      field :uuid, ::String, { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('uuid') } }
      # The email of the admin for Gusto's system. If the email matches an existing user, this will create an admin account for them.
      field :email, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('email') } }
      # The first name of the admin.
      field :first_name, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('first_name') } }
      # The last name of the admin.
      field :last_name, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('last_name') } }


      sig { params(uuid: ::String, email: T.nilable(::String), first_name: T.nilable(::String), last_name: T.nilable(::String)).void }
      def initialize(uuid: nil, email: nil, first_name: nil, last_name: nil)
        @uuid = uuid
        @email = email
        @first_name = first_name
        @last_name = last_name
      end
    end
  end
end
