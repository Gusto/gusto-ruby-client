# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module GustoEmbedded
  module Shared
  

    class PayrollShowReimbursements < ::Crystalline::FieldAugmented
      extend T::Sig

      # The dollar amount of the reimbursement for the pay period.
      field :amount, ::String, { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('amount') } }
      # The description of the reimbursement. Null for unnamed reimbursements.
      field :description, ::String, { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('description') } }
      # Whether the reimbursement is recurring. This field is only available for unprocessed payrolls.
      field :recurring, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('recurring') } }
      # The UUID of the reimbursement. Null for unnamed reimbursements. This field is only available for unprocessed payrolls.
      field :uuid, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('uuid') } }


      sig { params(amount: ::String, description: ::String, recurring: T.nilable(T::Boolean), uuid: T.nilable(::String)).void }
      def initialize(amount: nil, description: nil, recurring: nil, uuid: nil)
        @amount = amount
        @description = description
        @recurring = recurring
        @uuid = uuid
      end
    end
  end
end
