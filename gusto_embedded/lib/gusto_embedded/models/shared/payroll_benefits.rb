# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module GustoEmbedded
  module Shared
  

    class PayrollBenefits < ::Crystalline::FieldAugmented
      extend T::Sig

      # Check date of this payroll.
      field :check_date, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('check_date') } }
      # The company contribution amount for this employee on the payroll.
      field :company_benefit_contribution, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('company_benefit_contribution') } }
      # The employee benefit deduction amount for this employee on the payroll.
      field :company_benefit_deduction, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('company_benefit_deduction') } }
      # Gross pay for this employee on the payroll.
      field :gross_pay, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('gross_pay') } }
      # Total imputed pay for this employee on the payroll.
      field :imputed_pay, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('imputed_pay') } }

      field :pay_period, T.nilable(::GustoEmbedded::Shared::BenefitSummaryPayPeriod), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('pay_period') } }
      # Whether it is regular or bonus payroll
      field :payroll_type, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('payroll_type') } }

      field :payroll_uuid, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('payroll_uuid') } }


      sig { params(check_date: T.nilable(::String), company_benefit_contribution: T.nilable(::String), company_benefit_deduction: T.nilable(::String), gross_pay: T.nilable(::String), imputed_pay: T.nilable(::String), pay_period: T.nilable(::GustoEmbedded::Shared::BenefitSummaryPayPeriod), payroll_type: T.nilable(::String), payroll_uuid: T.nilable(::String)).void }
      def initialize(check_date: nil, company_benefit_contribution: nil, company_benefit_deduction: nil, gross_pay: nil, imputed_pay: nil, pay_period: nil, payroll_type: nil, payroll_uuid: nil)
        @check_date = check_date
        @company_benefit_contribution = company_benefit_contribution
        @company_benefit_deduction = company_benefit_deduction
        @gross_pay = gross_pay
        @imputed_pay = imputed_pay
        @pay_period = pay_period
        @payroll_type = payroll_type
        @payroll_uuid = payroll_uuid
      end
    end
  end
end
