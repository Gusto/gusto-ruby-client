# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module GustoEmbedded
  module Shared
  

    class FixedCompensations < ::Crystalline::FieldAugmented
      extend T::Sig

      # The amount of the compensation for the pay period.
      field :amount, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('amount') } }
      # The UUID of the job for the compensation.
      field :job_uuid, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('job_uuid') } }
      # The name of the compensation. This also serves as the unique, immutable identifier for this compensation.
      field :name, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('name') } }


      sig { params(amount: T.nilable(::String), job_uuid: T.nilable(::String), name: T.nilable(::String)).void }
      def initialize(amount: nil, job_uuid: nil, name: nil)
        @amount = amount
        @job_uuid = job_uuid
        @name = name
      end
    end
  end
end
