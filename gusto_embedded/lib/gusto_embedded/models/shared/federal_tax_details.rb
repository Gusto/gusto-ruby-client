# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module GustoEmbedded
  module Shared
  
    # Example response
    class FederalTaxDetails < ::Crystalline::FieldAugmented
      extend T::Sig

      # How often the company sends money to the IRS. One of:
      #   - Semiweekly
      #   - Monthly
      field :deposit_schedule, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('deposit_schedule') } }
      # The date that these details took effect.
      field :effective_date, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('effective_date') } }
      # Whether the EIN was able to be verified as a valid EIN with the IRS. 
      field :ein_verified, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('ein_verified') } }
      # The form used by the company for federal tax filing. One of:
      # - 941 (Quarterly federal tax return form)
      # - 944 (Annual federal tax return form)
      field :filing_form, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('filing_form') } }
      # Whether company's Employer Identification Number (EIN) is present
      field :has_ein, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('has_ein') } }
      # The legal name of the company
      field :legal_name, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('legal_name') } }
      # What type of tax entity the company is. One of:
      # - C-Corporation
      # - S-Corporation
      # - Sole proprietor
      # - LLC
      # - LLP
      # - Limited partnership
      # - Co-ownership
      # - Association
      # - Trusteeship
      # - General partnership
      # - Joint venture
      # - Non-Profit
      field :tax_payer_type, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('tax_payer_type') } }
      # Whether the company is taxed as an S-Corporation. Tax payer types that may be taxed as an S-Corporation include:
      # - S-Corporation
      # - C-Corporation
      # - LLC
      field :taxable_as_scorp, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('taxable_as_scorp') } }
      # The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
      field :version, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('version') } }


      sig { params(deposit_schedule: T.nilable(::String), effective_date: T.nilable(::String), ein_verified: T.nilable(T::Boolean), filing_form: T.nilable(::String), has_ein: T.nilable(T::Boolean), legal_name: T.nilable(::String), tax_payer_type: T.nilable(::String), taxable_as_scorp: T.nilable(T::Boolean), version: T.nilable(::String)).void }
      def initialize(deposit_schedule: nil, effective_date: nil, ein_verified: nil, filing_form: nil, has_ein: nil, legal_name: nil, tax_payer_type: nil, taxable_as_scorp: nil, version: nil)
        @deposit_schedule = deposit_schedule
        @effective_date = effective_date
        @ein_verified = ein_verified
        @filing_form = filing_form
        @has_ein = has_ein
        @legal_name = legal_name
        @tax_payer_type = tax_payer_type
        @taxable_as_scorp = taxable_as_scorp
        @version = version
      end
    end
  end
end
