# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module GustoEmbedded
  module Shared
  

    class PayrollCreditBlockersType < ::Crystalline::FieldAugmented
      extend T::Sig

      # The name of the credit blocker.
      field :blocker_name, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('blocker_name') } }
      # The type of blocker that's blocking the payment from being credited.
      field :blocker_type, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('blocker_type') } }
      # The unblock option that's been selected to resolve the credit blocker.
      field :selected_option, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('selected_option') } }
      # The status of the credit blocker
      field :status, T.nilable(::GustoEmbedded::Shared::PayrollCreditBlockersTypeStatus), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('status'), 'decoder': Utils.enum_from_string(::GustoEmbedded::Shared::PayrollCreditBlockersTypeStatus, true) } }
      # The available options to unblock a credit blocker.
      field :unblock_options, T.nilable(T::Array[::GustoEmbedded::Shared::PayrollCreditBlockersTypeUnblockOptions]), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('unblock_options') } }


      sig { params(blocker_name: T.nilable(::String), blocker_type: T.nilable(::String), selected_option: T.nilable(::String), status: T.nilable(::GustoEmbedded::Shared::PayrollCreditBlockersTypeStatus), unblock_options: T.nilable(T::Array[::GustoEmbedded::Shared::PayrollCreditBlockersTypeUnblockOptions])).void }
      def initialize(blocker_name: nil, blocker_type: nil, selected_option: nil, status: nil, unblock_options: nil)
        @blocker_name = blocker_name
        @blocker_type = blocker_type
        @selected_option = selected_option
        @status = status
        @unblock_options = unblock_options
      end
    end
  end
end
