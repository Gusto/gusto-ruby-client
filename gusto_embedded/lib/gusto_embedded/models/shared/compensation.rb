# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module GustoEmbedded
  module Shared
  
    # The representation of compensation in Gusto.
    class Compensation < ::Crystalline::FieldAugmented
      extend T::Sig

      # The UUID of the compensation in Gusto.
      field :uuid, ::String, { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('uuid') } }
      # Indicates if the compensation could be adjusted to minimum wage during payroll calculation.
      field :adjust_for_minimum_wage, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('adjust_for_minimum_wage') } }
      # The effective date for this compensation. For the first compensation, this defaults to the job's hire date.
      field :effective_date, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('effective_date') } }
      # The UUID of the employee to which the compensation belongs.
      field :employee_uuid, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('employee_uuid') } }
      # The FLSA status for this compensation. Salaried ('Exempt') employees are paid a fixed salary every pay period. Salaried with overtime ('Salaried Nonexempt') employees are paid a fixed salary every pay period, and receive overtime pay when applicable. Hourly ('Nonexempt') employees are paid for the hours they work, and receive overtime pay when applicable. Commissioned employees ('Commission Only Exempt') earn wages based only on commission. Commissioned with overtime ('Commission Only Nonexempt') earn wages based on commission, and receive overtime pay when applicable. Owners ('Owner') are employees that own at least twenty percent of the company. 
      field :flsa_status, T.nilable(::GustoEmbedded::Shared::FlsaStatusType), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('flsa_status'), 'decoder': Utils.enum_from_string(::GustoEmbedded::Shared::FlsaStatusType, true) } }
      # The UUID of the job to which the compensation belongs.
      field :job_uuid, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('job_uuid') } }
      # The minimum wages associated with the compensation.
      field :minimum_wages, T.nilable(T::Array[::GustoEmbedded::Shared::MinimumWages]), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('minimum_wages') } }
      # The unit accompanying the compensation rate. If the employee is an owner, rate should be 'Paycheck'.
      field :payment_unit, T.nilable(::GustoEmbedded::Shared::PaymentUnit), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('payment_unit'), 'decoder': Utils.enum_from_string(::GustoEmbedded::Shared::PaymentUnit, true) } }
      # The dollar amount paid per payment unit.
      field :rate, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('rate') } }
      # The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
      field :version, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('version') } }


      sig { params(uuid: ::String, adjust_for_minimum_wage: T.nilable(T::Boolean), effective_date: T.nilable(::String), employee_uuid: T.nilable(::String), flsa_status: T.nilable(::GustoEmbedded::Shared::FlsaStatusType), job_uuid: T.nilable(::String), minimum_wages: T.nilable(T::Array[::GustoEmbedded::Shared::MinimumWages]), payment_unit: T.nilable(::GustoEmbedded::Shared::PaymentUnit), rate: T.nilable(::String), version: T.nilable(::String)).void }
      def initialize(uuid: nil, adjust_for_minimum_wage: nil, effective_date: nil, employee_uuid: nil, flsa_status: nil, job_uuid: nil, minimum_wages: nil, payment_unit: nil, rate: nil, version: nil)
        @uuid = uuid
        @adjust_for_minimum_wage = adjust_for_minimum_wage
        @effective_date = effective_date
        @employee_uuid = employee_uuid
        @flsa_status = flsa_status
        @job_uuid = job_uuid
        @minimum_wages = minimum_wages
        @payment_unit = payment_unit
        @rate = rate
        @version = version
      end
    end
  end
end
