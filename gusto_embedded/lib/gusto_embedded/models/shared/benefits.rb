# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module GustoEmbedded
  module Shared
  

    class Benefits < ::Crystalline::FieldAugmented
      extend T::Sig


      field :company_contribution, T.nilable(::Float), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('company_contribution') } }

      field :employee_deduction, T.nilable(::Float), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('employee_deduction') } }

      field :imputed, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('imputed') } }

      field :name, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('name') } }


      sig { params(company_contribution: T.nilable(::Float), employee_deduction: T.nilable(::Float), imputed: T.nilable(T::Boolean), name: T.nilable(::String)).void }
      def initialize(company_contribution: nil, employee_deduction: nil, imputed: nil, name: nil)
        @company_contribution = company_contribution
        @employee_deduction = employee_deduction
        @imputed = imputed
        @name = name
      end
    end
  end
end
