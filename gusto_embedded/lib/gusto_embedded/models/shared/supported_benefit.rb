# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module GustoEmbedded
  module Shared
  
    # Example response
    class SupportedBenefit < ::Crystalline::FieldAugmented
      extend T::Sig

      # The benefit type in Gusto.
      field :benefit_type, T.nilable(::Integer), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('benefit_type') } }
      # Category where the benefit belongs to.
      field :category, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('category') } }
      # The description of the benefit.
      field :description, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('description') } }
      # Whether the benefit is healthcare related.
      field :healthcare, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('healthcare') } }
      # Whether the benefit is considered imputed income.
      field :imputed, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('imputed') } }
      # The name of the benefit.
      field :name, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('name') } }
      # Whether the benefit is deducted after tax calculations.
      field :posttax, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('posttax') } }
      # Whether the benefit is deducted before tax calculations, thus reducing oneâ€™s taxable income
      field :pretax, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('pretax') } }
      # Whether the benefit is associated with retirement planning.
      field :retirement, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('retirement') } }
      # Whether this benefit can be written (created, updated, or destroyed). Returns true if the benefit type is permitted for the application, false otherwise.
      field :writable_by_application, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('writable_by_application') } }
      # Whether the benefit has a government mandated yearly limit. If the benefit has a government mandated yearly limit, employees cannot be added to more than one benefit of this type.
      field :yearly_limit, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('yearly_limit') } }


      sig { params(benefit_type: T.nilable(::Integer), category: T.nilable(::String), description: T.nilable(::String), healthcare: T.nilable(T::Boolean), imputed: T.nilable(T::Boolean), name: T.nilable(::String), posttax: T.nilable(T::Boolean), pretax: T.nilable(T::Boolean), retirement: T.nilable(T::Boolean), writable_by_application: T.nilable(T::Boolean), yearly_limit: T.nilable(T::Boolean)).void }
      def initialize(benefit_type: nil, category: nil, description: nil, healthcare: nil, imputed: nil, name: nil, posttax: nil, pretax: nil, retirement: nil, writable_by_application: nil, yearly_limit: nil)
        @benefit_type = benefit_type
        @category = category
        @description = description
        @healthcare = healthcare
        @imputed = imputed
        @name = name
        @posttax = posttax
        @pretax = pretax
        @retirement = retirement
        @writable_by_application = writable_by_application
        @yearly_limit = yearly_limit
      end
    end
  end
end
