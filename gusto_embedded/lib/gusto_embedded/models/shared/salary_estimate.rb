# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module GustoEmbedded
  module Shared
  
    # A salary estimate calculation for an S-Corp owner based on occupation, experience level, location, and business revenue.
    class SalaryEstimate < ::Crystalline::FieldAugmented
      extend T::Sig

      # The annual net revenue of the business used for salary calculations.
      field :annual_net_revenue, ::String, { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('annual_net_revenue') } }
      # The timestamp when this salary estimate was created.
      field :created_at, ::DateTime, { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('created_at'), 'decoder': Utils.datetime_from_iso_format(false) } }
      # The UUID of the employee this salary estimate is for.
      field :employee_uuid, ::String, { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('employee_uuid') } }
      # Array of occupations with their experience levels and time allocations.
      field :occupations, T::Array[::GustoEmbedded::Shared::Occupations], { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('occupations') } }
      # The timestamp when this salary estimate was last updated.
      field :updated_at, ::DateTime, { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('updated_at'), 'decoder': Utils.datetime_from_iso_format(false) } }
      # The UUID of the salary estimate.
      field :uuid, ::String, { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('uuid') } }
      # The ZIP code used for location-based salary calculations.
      field :zip_code, ::String, { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('zip_code') } }
      # The timestamp when this salary estimate was accepted and finalized.
      field :accepted_at, T.nilable(::DateTime), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('accepted_at'), 'decoder': Utils.datetime_from_iso_format(true) } }
      # The UUID of the employee job this salary estimate is associated with (once accepted).
      field :employee_job_uuid, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('employee_job_uuid') } }
      # The calculated reasonable salary estimate in cents. Null if not yet calculated.
      field :result, T.nilable(::Integer), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('result') } }


      sig { params(annual_net_revenue: ::String, created_at: ::DateTime, employee_uuid: ::String, occupations: T::Array[::GustoEmbedded::Shared::Occupations], updated_at: ::DateTime, uuid: ::String, zip_code: ::String, accepted_at: T.nilable(::DateTime), employee_job_uuid: T.nilable(::String), result: T.nilable(::Integer)).void }
      def initialize(annual_net_revenue: nil, created_at: nil, employee_uuid: nil, occupations: nil, updated_at: nil, uuid: nil, zip_code: nil, accepted_at: nil, employee_job_uuid: nil, result: nil)
        @annual_net_revenue = annual_net_revenue
        @created_at = created_at
        @employee_uuid = employee_uuid
        @occupations = occupations
        @updated_at = updated_at
        @uuid = uuid
        @zip_code = zip_code
        @accepted_at = accepted_at
        @employee_job_uuid = employee_job_uuid
        @result = result
      end
    end
  end
end
