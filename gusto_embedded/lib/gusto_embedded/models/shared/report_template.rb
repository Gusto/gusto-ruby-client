# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module GustoEmbedded
  module Shared
  
    # Example response
    class ReportTemplate < ::Crystalline::FieldAugmented
      extend T::Sig

      # List of columns recommended
      field :columns, T.nilable(T::Array[::String]), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('columns') } }
      # Company UUID
      field :company_uuid, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('company_uuid') } }
      # List of groupings recommended
      field :groupings, T.nilable(T::Array[::String]), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('groupings') } }
      # Type of report template
      field :report_type, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('report_type') } }


      sig { params(columns: T.nilable(T::Array[::String]), company_uuid: T.nilable(::String), groupings: T.nilable(T::Array[::String]), report_type: T.nilable(::String)).void }
      def initialize(columns: nil, company_uuid: nil, groupings: nil, report_type: nil)
        @columns = columns
        @company_uuid = company_uuid
        @groupings = groupings
        @report_type = report_type
      end
    end
  end
end
