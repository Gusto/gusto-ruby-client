# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module GustoEmbedded
  module Shared
  
    # The subtotals for the payroll.
    class Totals < ::Crystalline::FieldAugmented
      extend T::Sig

      # The total child support debit for the payroll.
      field :child_support_debit, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('child_support_debit') } }
      # The total company debit for the payroll.
      field :company_debit, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('company_debit') } }
      # The total company net pay for the payroll.
      field :net_pay_debit, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('net_pay_debit') } }
      # The total reimbursements for the payroll.
      field :reimbursement_debit, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('reimbursement_debit') } }
      # The total tax debit for the payroll.
      field :tax_debit, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('tax_debit') } }


      sig { params(child_support_debit: T.nilable(::String), company_debit: T.nilable(::String), net_pay_debit: T.nilable(::String), reimbursement_debit: T.nilable(::String), tax_debit: T.nilable(::String)).void }
      def initialize(child_support_debit: nil, company_debit: nil, net_pay_debit: nil, reimbursement_debit: nil, tax_debit: nil)
        @child_support_debit = child_support_debit
        @company_debit = company_debit
        @net_pay_debit = net_pay_debit
        @reimbursement_debit = reimbursement_debit
        @tax_debit = tax_debit
      end
    end
  end
end
