# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module GustoEmbedded
  module Shared
  

    class ApplicableTaxes < ::Crystalline::FieldAugmented
      extend T::Sig

      # Some taxes may have an amount withheld from the employee and an amount withheld from the employer, e.g. Social Security. A `true` value indicates this is the employer's amount.
      field :employer_tax, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('employer_tax') } }

      field :id, T.nilable(::Integer), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('id') } }

      field :name, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('name') } }
      # Some taxes may have different rates or reporting requirements depending on if the employee is a resident or non-resident of the tax jurisdiction.
      field :resident_tax, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('resident_tax') } }


      sig { params(employer_tax: T.nilable(T::Boolean), id: T.nilable(::Integer), name: T.nilable(::String), resident_tax: T.nilable(T::Boolean)).void }
      def initialize(employer_tax: nil, id: nil, name: nil, resident_tax: nil)
        @employer_tax = employer_tax
        @id = id
        @name = name
        @resident_tax = resident_tax
      end
    end
  end
end
