# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module GustoEmbedded
  module Shared
  
    # Representation of a bank account item
    class PaymentMethodBankAccount < ::Crystalline::FieldAugmented
      extend T::Sig

      # The bank account ID
      field :uuid, ::String, { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('uuid') } }
      # Masked bank account number
      field :hidden_account_number, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('hidden_account_number') } }
      # The bank account name
      field :name, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('name') } }
      # The order of priority for each payment split, with priority 1 being the first bank account paid. Priority must be unique and sequential.
      field :priority, T.nilable(::Integer), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('priority') } }
      # The cents amount allocated for each payment split
      field :split_amount, T.nilable(::Integer), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('split_amount') } }


      sig { params(uuid: ::String, hidden_account_number: T.nilable(::String), name: T.nilable(::String), priority: T.nilable(::Integer), split_amount: T.nilable(::Integer)).void }
      def initialize(uuid: nil, hidden_account_number: nil, name: nil, priority: nil, split_amount: nil)
        @uuid = uuid
        @hidden_account_number = hidden_account_number
        @name = name
        @priority = priority
        @split_amount = split_amount
      end
    end
  end
end
