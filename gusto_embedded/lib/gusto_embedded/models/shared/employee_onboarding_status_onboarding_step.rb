# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module GustoEmbedded
  module Shared
  

    class EmployeeOnboardingStatusOnboardingStep < ::Crystalline::FieldAugmented
      extend T::Sig

      # When true, this step has been completed.
      field :completed, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('completed') } }
      # String identifier for the onboarding step.
      field :id, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('id') } }
      # When true, this step is required.
      field :required, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('required') } }
      # A list of onboarding steps required to begin this step.
      field :requirements, T.nilable(T::Array[::String]), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('requirements') } }
      # User-friendly description of the onboarding step.
      field :title, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('title') } }


      sig { params(completed: T.nilable(T::Boolean), id: T.nilable(::String), required: T.nilable(T::Boolean), requirements: T.nilable(T::Array[::String]), title: T.nilable(::String)).void }
      def initialize(completed: nil, id: nil, required: nil, requirements: nil, title: nil)
        @completed = completed
        @id = id
        @required = required
        @requirements = requirements
        @title = title
      end
    end
  end
end
