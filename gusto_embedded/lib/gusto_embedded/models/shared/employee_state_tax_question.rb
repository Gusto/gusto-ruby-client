# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module GustoEmbedded
  module Shared
  

    class EmployeeStateTaxQuestion < ::Crystalline::FieldAugmented
      extend T::Sig


      field :answers, T::Array[::GustoEmbedded::Shared::EmployeeStateTaxAnswer], { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('answers') } }
      # An explaination of the question - this may contain inline html formatted links.
      field :description, ::String, { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('description') } }

      field :input_question_format, ::GustoEmbedded::Shared::EmployeeStateTaxInputQuestionFormat, { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('input_question_format') } }
      # A unique identifier of the question (for the given state) - used for updating the answer.
      field :key, ::String, { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('key') } }
      # A short title for the question
      field :label, ::String, { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('label') } }


      sig { params(answers: T::Array[::GustoEmbedded::Shared::EmployeeStateTaxAnswer], description: ::String, input_question_format: ::GustoEmbedded::Shared::EmployeeStateTaxInputQuestionFormat, key: ::String, label: ::String).void }
      def initialize(answers: nil, description: nil, input_question_format: nil, key: nil, label: nil)
        @answers = answers
        @description = description
        @input_question_format = input_question_format
        @key = key
        @label = label
      end
    end
  end
end
