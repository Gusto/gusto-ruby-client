# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module GustoEmbedded
  module Shared
  

    class TaxRequirement < ::Crystalline::FieldAugmented
      extend T::Sig

      # An array of references to other requirements within the requirement set. This requirement is only applicable if all referenced requirements have values matching the corresponding `value`. The primary use-case is dynamically hiding and showing requirements as values change. E.g. Show Requirement-B when Requirement-A has been answered with `false`. To be explicit, an empty array means the requirement is applicable.
      field :applicable_if, T.nilable(T::Array[::GustoEmbedded::Shared::ApplicableIf]), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('applicable_if') } }
      # A more detailed customer facing description of the requirement
      field :description, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('description') } }
      # An identifier for an individual requirement. Uniqueness is guaranteed within a requirement set.
      field :key, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('key') } }
      # A customer facing description of the requirement
      field :label, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('label') } }

      field :metadata, T.nilable(::GustoEmbedded::Shared::TaxRequirementMetadata), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('metadata') } }
      # The "answer"
      field :value, T.nilable(::Object), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('value') } }


      sig { params(applicable_if: T.nilable(T::Array[::GustoEmbedded::Shared::ApplicableIf]), description: T.nilable(::String), key: T.nilable(::String), label: T.nilable(::String), metadata: T.nilable(::GustoEmbedded::Shared::TaxRequirementMetadata), value: T.nilable(::Object)).void }
      def initialize(applicable_if: nil, description: nil, key: nil, label: nil, metadata: nil, value: nil)
        @applicable_if = applicable_if
        @description = description
        @key = key
        @label = label
        @metadata = metadata
        @value = value
      end
    end
  end
end
