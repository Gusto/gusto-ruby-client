# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module GustoEmbedded
  module Shared
  

    class PayrollUpdateEmployeeCompensations < ::Crystalline::FieldAugmented
      extend T::Sig


      field :deductions, T.nilable(T::Array[::GustoEmbedded::Shared::PayrollUpdateDeductions]), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('deductions') } }
      # The UUID of the employee.
      field :employee_uuid, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('employee_uuid') } }
      # This employee will be excluded from payroll calculation and will not be paid for the payroll.
      field :excluded, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('excluded') } }

      field :fixed_compensations, T.nilable(T::Array[::GustoEmbedded::Shared::PayrollUpdateFixedCompensations]), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('fixed_compensations') } }

      field :hourly_compensations, T.nilable(T::Array[::GustoEmbedded::Shared::PayrollUpdateHourlyCompensations]), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('hourly_compensations') } }
      # Custom text that will be printed as a personal note to the employee on a paystub.
      field :memo, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('memo') } }
      # An array of all paid time off the employee is eligible for this pay period. Each paid time off object can be the name or the specific policy_uuid.
      field :paid_time_off, T.nilable(T::Array[::GustoEmbedded::Shared::PayrollUpdatePaidTimeOff]), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('paid_time_off') } }
      # The employee's compensation payment method. Invalid values will be ignored.
      field :payment_method, T.nilable(::GustoEmbedded::Shared::PayrollUpdatePaymentMethod), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('payment_method'), 'decoder': Utils.enum_from_string(::GustoEmbedded::Shared::PayrollUpdatePaymentMethod, true) } }
      # An array of reimbursements for the employee.
      field :reimbursements, T.nilable(T::Array[::GustoEmbedded::Shared::PayrollUpdateReimbursements]), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('reimbursements') } }
      # The current version of this employee compensation from the prepared payroll. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
      field :version, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('version') } }


      sig { params(deductions: T.nilable(T::Array[::GustoEmbedded::Shared::PayrollUpdateDeductions]), employee_uuid: T.nilable(::String), excluded: T.nilable(T::Boolean), fixed_compensations: T.nilable(T::Array[::GustoEmbedded::Shared::PayrollUpdateFixedCompensations]), hourly_compensations: T.nilable(T::Array[::GustoEmbedded::Shared::PayrollUpdateHourlyCompensations]), memo: T.nilable(::String), paid_time_off: T.nilable(T::Array[::GustoEmbedded::Shared::PayrollUpdatePaidTimeOff]), payment_method: T.nilable(::GustoEmbedded::Shared::PayrollUpdatePaymentMethod), reimbursements: T.nilable(T::Array[::GustoEmbedded::Shared::PayrollUpdateReimbursements]), version: T.nilable(::String)).void }
      def initialize(deductions: nil, employee_uuid: nil, excluded: nil, fixed_compensations: nil, hourly_compensations: nil, memo: nil, paid_time_off: nil, payment_method: nil, reimbursements: nil, version: nil)
        @deductions = deductions
        @employee_uuid = employee_uuid
        @excluded = excluded
        @fixed_compensations = fixed_compensations
        @hourly_compensations = hourly_compensations
        @memo = memo
        @paid_time_off = paid_time_off
        @payment_method = payment_method
        @reimbursements = reimbursements
        @version = version
      end
    end
  end
end
