# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module GustoEmbedded
  module Operations
  

    class PayPeriods < ::Crystalline::FieldAugmented
      extend T::Sig

      # The payment date, "Check date", for the pay period
      field :check_date, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('check_date') } }
      # The last day of the pay period.
      field :end_date, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('end_date') } }
      # The deadline to run payroll for direct deposit on the check date
      field :run_payroll_by, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('run_payroll_by') } }
      # The first day of the pay period
      field :start_date, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('start_date') } }


      sig { params(check_date: T.nilable(::String), end_date: T.nilable(::String), run_payroll_by: T.nilable(::String), start_date: T.nilable(::String)).void }
      def initialize(check_date: nil, end_date: nil, run_payroll_by: nil, start_date: nil)
        @check_date = check_date
        @end_date = end_date
        @run_payroll_by = run_payroll_by
        @start_date = start_date
      end
    end
  end
end
