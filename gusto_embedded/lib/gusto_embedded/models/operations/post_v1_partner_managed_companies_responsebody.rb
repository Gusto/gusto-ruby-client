# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module GustoEmbedded
  module Operations
  
    # Object returned when creating a partner managed company
    class PostV1PartnerManagedCompaniesResponseBody < ::Crystalline::FieldAugmented
      extend T::Sig

      # Access token that can be used for OAuth access to the account. Access tokens expire 2 hours after they are issued.
      field :access_token, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('access_token') } }
      # Gustoâ€™s UUID for the company
      field :company_uuid, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('company_uuid') } }
      # Time of access_token expiration in seconds
      field :expires_in, T.nilable(::Integer), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('expires_in') } }
      # Refresh token that can be exchanged for a new access token.
      field :refresh_token, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('refresh_token') } }


      sig { params(access_token: T.nilable(::String), company_uuid: T.nilable(::String), expires_in: T.nilable(::Integer), refresh_token: T.nilable(::String)).void }
      def initialize(access_token: nil, company_uuid: nil, expires_in: nil, refresh_token: nil)
        @access_token = access_token
        @company_uuid = company_uuid
        @expires_in = expires_in
        @refresh_token = refresh_token
      end
    end
  end
end
