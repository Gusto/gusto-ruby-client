# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module GustoEmbedded
  module Operations
  

    class PutV1LocationsLocationIdRequestBody < ::Crystalline::FieldAugmented
      extend T::Sig

      # The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
      field :version, ::String, { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('version') } }

      field :city, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('city') } }

      field :country, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('country') } }
      # For a company location, specify if this location is the company's filing address. A company has a single filing address, so this designation will override any previous selection.
      field :filing_address, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('filing_address') } }
      # For a company location, specify if this location is the company's mailing address. A company has a single mailing address, so this designation will override any previous selection.
      field :mailing_address, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('mailing_address') } }

      field :phone_number, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('phone_number') } }

      field :state, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('state') } }

      field :street_1, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('street_1') } }

      field :street_2, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('street_2') } }

      field :zip, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('zip') } }


      sig { params(version: ::String, city: T.nilable(::String), country: T.nilable(::String), filing_address: T.nilable(T::Boolean), mailing_address: T.nilable(T::Boolean), phone_number: T.nilable(::String), state: T.nilable(::String), street_1: T.nilable(::String), street_2: T.nilable(::String), zip: T.nilable(::String)).void }
      def initialize(version: nil, city: nil, country: nil, filing_address: nil, mailing_address: nil, phone_number: nil, state: nil, street_1: nil, street_2: nil, zip: nil)
        @version = version
        @city = city
        @country = country
        @filing_address = filing_address
        @mailing_address = mailing_address
        @phone_number = phone_number
        @state = state
        @street_1 = street_1
        @street_2 = street_2
        @zip = zip
      end
    end
  end
end
