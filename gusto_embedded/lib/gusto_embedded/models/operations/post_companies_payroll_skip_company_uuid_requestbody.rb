# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module GustoEmbedded
  module Operations
  

    class PostCompaniesPayrollSkipCompanyUuidRequestBody < ::Crystalline::FieldAugmented
      extend T::Sig

      # Payroll type
      field :payroll_type, ::GustoEmbedded::Operations::PayrollType, { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('payroll_type'), 'decoder': Utils.enum_from_string(::GustoEmbedded::Operations::PayrollType, false) } }
      # An array of employees. This field is only applicable to new hire payroll and termination payroll
      field :employee_uuids, T.nilable(T::Array[::String]), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('employee_uuids') } }
      # Pay period end date. If left empty, defaults to today's date.
      field :end_date, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('end_date') } }
      # The UUID of the pay schedule
      field :pay_schedule_uuid, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('pay_schedule_uuid') } }
      # Pay period start date
      field :start_date, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('start_date') } }


      sig { params(payroll_type: ::GustoEmbedded::Operations::PayrollType, employee_uuids: T.nilable(T::Array[::String]), end_date: T.nilable(::String), pay_schedule_uuid: T.nilable(::String), start_date: T.nilable(::String)).void }
      def initialize(payroll_type: nil, employee_uuids: nil, end_date: nil, pay_schedule_uuid: nil, start_date: nil)
        @payroll_type = payroll_type
        @employee_uuids = employee_uuids
        @end_date = end_date
        @pay_schedule_uuid = pay_schedule_uuid
        @start_date = start_date
      end
    end
  end
end
