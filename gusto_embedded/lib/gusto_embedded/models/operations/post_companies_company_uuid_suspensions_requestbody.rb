# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module GustoEmbedded
  module Operations
  

    class PostCompaniesCompanyUuidSuspensionsRequestBody < ::Crystalline::FieldAugmented
      extend T::Sig

      # Should Gusto file quarterly tax forms on behalf of the company? The correct answer can depend on why the company is suspending their account, and how taxes are being reconciled.
      field :file_quarterly_forms, T::Boolean, { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('file_quarterly_forms') } }
      # Should Gusto file yearly tax forms on behalf of the company? The correct answer can depend on why the company is suspending their account, and how taxes are being reconciled.
      field :file_yearly_forms, T::Boolean, { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('file_yearly_forms') } }
      # Explanation for why the company is suspending their account.
      # 
      # > ðŸš§ FEIN or entity type changes require Customer Support
      # > If a company is switching FEIN or changing their entity type, this change must be performed by Gusto Customer Support and cannot be performed via the API at this time.
      # 
      field :reason, ::GustoEmbedded::Operations::Reason, { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('reason'), 'decoder': Utils.enum_from_string(::GustoEmbedded::Operations::Reason, false) } }
      # How Gusto will handle taxes already collected.
      field :reconcile_tax_method, ::GustoEmbedded::Operations::ReconcileTaxMethod, { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('reconcile_tax_method'), 'decoder': Utils.enum_from_string(::GustoEmbedded::Operations::ReconcileTaxMethod, false) } }
      # User-supplied comments describing why they are suspending their account. Required if the user is leaving for another provider and selects "other" instead of a defined provider.
      field :comments, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('comments') } }
      # The competitor the company is switching to. Required if `reason` is `'switching_provider'`.
      # 
      # > ðŸš§ Switching to Gusto requires Customer Support
      # > If `'gusto_com'` is selected, this change must be completed by Gusto Customer Support and cannot be performed via the API. This endpoint will return a 422 error in that case.
      # 
      field :leaving_for, T.nilable(::GustoEmbedded::Operations::LeavingFor), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('leaving_for'), 'decoder': Utils.enum_from_string(::GustoEmbedded::Operations::LeavingFor, true) } }


      sig { params(file_quarterly_forms: T::Boolean, file_yearly_forms: T::Boolean, reason: ::GustoEmbedded::Operations::Reason, reconcile_tax_method: ::GustoEmbedded::Operations::ReconcileTaxMethod, comments: T.nilable(::String), leaving_for: T.nilable(::GustoEmbedded::Operations::LeavingFor)).void }
      def initialize(file_quarterly_forms: nil, file_yearly_forms: nil, reason: nil, reconcile_tax_method: nil, comments: nil, leaving_for: nil)
        @file_quarterly_forms = file_quarterly_forms
        @file_yearly_forms = file_yearly_forms
        @reason = reason
        @reconcile_tax_method = reconcile_tax_method
        @comments = comments
        @leaving_for = leaving_for
      end
    end
  end
end
