# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module GustoEmbedded
  module Operations
  

    class GetV1CompaniesCompanyIdEmployeesRequest < ::Crystalline::FieldAugmented
      extend T::Sig

      # The UUID of the company
      field :company_id, ::String, { 'path_param': { 'field_name': 'company_id', 'style': 'simple', 'explode': false } }
      # Include the requested attribute(s) in each employee response, multiple options are comma separated. Available options:
      # - all_compensations: Include all effective dated compensations for each job instead of only the current compensation
      # - custom_fields: Include employees' custom fields
      # 
      field :include, T.nilable(T::Array[::GustoEmbedded::Operations::Include]), { 'query_param': { 'field_name': 'include', 'style': 'form', 'explode': false } }
      # The page that is requested. When unspecified, will load all objects unless endpoint forces pagination.
      field :page, T.nilable(::Integer), { 'query_param': { 'field_name': 'page', 'style': 'form', 'explode': true } }
      # Number of objects per page. For majority of endpoints will default to 25
      field :per, T.nilable(::Integer), { 'query_param': { 'field_name': 'per', 'style': 'form', 'explode': true } }
      # A string to search for in the object's names
      field :search_term, T.nilable(::String), { 'query_param': { 'field_name': 'search_term', 'style': 'form', 'explode': true } }
      # Filters employees by the provided boolean
      field :terminated, T.nilable(T::Boolean), { 'query_param': { 'field_name': 'terminated', 'style': 'form', 'explode': true } }

      field :uuids, T.nilable(T::Array[::String]), { 'query_param': { 'field_name': 'uuids', 'style': 'form', 'explode': true } }
      # Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
      field :x_gusto_api_version, T.nilable(::GustoEmbedded::Operations::GetV1CompaniesCompanyIdEmployeesHeaderXGustoAPIVersion), { 'header': { 'field_name': 'X-Gusto-API-Version', 'style': 'simple', 'explode': false } }


      sig { params(company_id: ::String, include: T.nilable(T::Array[::GustoEmbedded::Operations::Include]), page: T.nilable(::Integer), per: T.nilable(::Integer), search_term: T.nilable(::String), terminated: T.nilable(T::Boolean), uuids: T.nilable(T::Array[::String]), x_gusto_api_version: T.nilable(::GustoEmbedded::Operations::GetV1CompaniesCompanyIdEmployeesHeaderXGustoAPIVersion)).void }
      def initialize(company_id: nil, include: nil, page: nil, per: nil, search_term: nil, terminated: nil, uuids: nil, x_gusto_api_version: nil)
        @company_id = company_id
        @include = include
        @page = page
        @per = per
        @search_term = search_term
        @terminated = terminated
        @uuids = uuids
        @x_gusto_api_version = x_gusto_api_version
      end
    end
  end
end
