# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module GustoEmbedded
  module Operations
  

    class PostV1EmployeesEmployeeIdTerminationsRequestBody < ::Crystalline::FieldAugmented
      extend T::Sig

      # The employee's last day of work.
      field :effective_date, ::String, { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('effective_date') } }
      # If true, the employee should receive their final wages via an off-cycle payroll. If false, they should receive their final wages on their current pay schedule.
      field :run_termination_payroll, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('run_termination_payroll') } }


      sig { params(effective_date: ::String, run_termination_payroll: T.nilable(T::Boolean)).void }
      def initialize(effective_date: nil, run_termination_payroll: nil)
        @effective_date = effective_date
        @run_termination_payroll = run_termination_payroll
      end
    end
  end
end
