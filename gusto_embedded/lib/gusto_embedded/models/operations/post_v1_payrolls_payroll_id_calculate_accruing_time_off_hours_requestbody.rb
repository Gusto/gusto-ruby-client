# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module GustoEmbedded
  module Operations
  

    class PostV1PayrollsPayrollIdCalculateAccruingTimeOffHoursRequestBody < ::Crystalline::FieldAugmented
      extend T::Sig

      # double overtime hours worked in this pay period
      field :double_overtime_hours_worked, T.nilable(::Float), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('double_overtime_hours_worked') } }
      # overtime hours worked in this pay period
      field :overtime_hours_worked, T.nilable(::Float), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('overtime_hours_worked') } }
      # paid time off hours used in this pay period
      field :pto_hours_used, T.nilable(::Float), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('pto_hours_used') } }
      # regular hours worked in this pay period
      field :regular_hours_worked, T.nilable(::Float), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('regular_hours_worked') } }
      # sick hours used in this pay period
      field :sick_hours_used, T.nilable(::Float), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('sick_hours_used') } }


      sig { params(double_overtime_hours_worked: T.nilable(::Float), overtime_hours_worked: T.nilable(::Float), pto_hours_used: T.nilable(::Float), regular_hours_worked: T.nilable(::Float), sick_hours_used: T.nilable(::Float)).void }
      def initialize(double_overtime_hours_worked: nil, overtime_hours_worked: nil, pto_hours_used: nil, regular_hours_worked: nil, sick_hours_used: nil)
        @double_overtime_hours_worked = double_overtime_hours_worked
        @overtime_hours_worked = overtime_hours_worked
        @pto_hours_used = pto_hours_used
        @regular_hours_worked = regular_hours_worked
        @sick_hours_used = sick_hours_used
      end
    end
  end
end
