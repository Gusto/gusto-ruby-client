# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module GustoEmbedded
  module Operations
  

    class GetCompaniesCompanyUuidContractorPaymentsPreviewContractorPayments < ::Crystalline::FieldAugmented
      extend T::Sig


      field :bonus, T.nilable(::Integer), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('bonus') } }

      field :contractor_uuid, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('contractor_uuid') } }

      field :date, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('date') } }

      field :hourly_rate, T.nilable(::Integer), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('hourly_rate') } }

      field :hours, T.nilable(::Integer), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('hours') } }

      field :payment_method, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('payment_method') } }

      field :reimbursement, T.nilable(::Integer), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('reimbursement') } }

      field :wage, T.nilable(::Integer), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('wage') } }


      sig { params(bonus: T.nilable(::Integer), contractor_uuid: T.nilable(::String), date: T.nilable(::String), hourly_rate: T.nilable(::Integer), hours: T.nilable(::Integer), payment_method: T.nilable(::String), reimbursement: T.nilable(::Integer), wage: T.nilable(::Integer)).void }
      def initialize(bonus: nil, contractor_uuid: nil, date: nil, hourly_rate: nil, hours: nil, payment_method: nil, reimbursement: nil, wage: nil)
        @bonus = bonus
        @contractor_uuid = contractor_uuid
        @date = date
        @hourly_rate = hourly_rate
        @hours = hours
        @payment_method = payment_method
        @reimbursement = reimbursement
        @wage = wage
      end
    end
  end
end
