# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module GustoEmbedded
  module Operations
  
    # Create a company location.
    class PostV1CompaniesCompanyIdLocationsRequestBody < ::Crystalline::FieldAugmented
      extend T::Sig


      field :city, ::String, { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('city') } }

      field :phone_number, ::String, { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('phone_number') } }

      field :state, ::String, { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('state') } }

      field :street_1, ::String, { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('street_1') } }

      field :zip, ::String, { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('zip') } }
      # Specify if this location is the company's filing address.
      field :filing_address, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('filing_address') } }
      # Specify if this location is the company's mailing address.
      field :mailing_address, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('mailing_address') } }

      field :street_2, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('street_2') } }


      sig { params(city: ::String, phone_number: ::String, state: ::String, street_1: ::String, zip: ::String, filing_address: T.nilable(T::Boolean), mailing_address: T.nilable(T::Boolean), street_2: T.nilable(::String)).void }
      def initialize(city: nil, phone_number: nil, state: nil, street_1: nil, zip: nil, filing_address: nil, mailing_address: nil, street_2: nil)
        @city = city
        @phone_number = phone_number
        @state = state
        @street_1 = street_1
        @zip = zip
        @filing_address = filing_address
        @mailing_address = mailing_address
        @street_2 = street_2
      end
    end
  end
end
