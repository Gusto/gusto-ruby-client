# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module GustoEmbedded
  module Operations
  

    class RequirementSets < ::Crystalline::FieldAugmented
      extend T::Sig

      # An ISO 8601 formatted date representing the date values became effective. Some requirement sets are effective dated, while others are not. Multiple requirement sets for the same state/key can/will exist with unique effective dates. If a requirement set is has an `effective_from` value, all requirement sets with the same key will also have an `effective_from` value.
      field :effective_from, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('effective_from') } }
      # An identifier for a set of requirements. A list of requirement sets can contain multiple sets with the same `key` and different `effective_from` values.
      field :key, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('key') } }

      field :requirements, T.nilable(T::Array[::GustoEmbedded::Operations::Requirements]), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('requirements') } }
      # One of the two-letter state abbreviations for the fifty United States and the District of Columbia (DC)
      field :state, T.nilable(::String), { 'format_json': { 'letter_case': ::GustoEmbedded::Utils.field_name('state') } }


      sig { params(effective_from: T.nilable(::String), key: T.nilable(::String), requirements: T.nilable(T::Array[::GustoEmbedded::Operations::Requirements]), state: T.nilable(::String)).void }
      def initialize(effective_from: nil, key: nil, requirements: nil, state: nil)
        @effective_from = effective_from
        @key = key
        @requirements = requirements
        @state = state
      end
    end
  end
end
