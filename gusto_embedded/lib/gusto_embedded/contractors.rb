# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'faraday'
require 'faraday/multipart'
require 'sorbet-runtime'

module GustoEmbedded
  extend T::Sig
  class Contractors
    extend T::Sig


    sig { params(sdk_config: SDKConfiguration).void }
    def initialize(sdk_config)
      @sdk_configuration = sdk_config
    end


    sig { params(company_uuid: ::String, request_body: ::GustoEmbedded::Operations::PostV1CompaniesCompanyUuidContractorsRequestBody, x_gusto_api_version: T.nilable(::GustoEmbedded::Shared::VersionHeader)).returns(::GustoEmbedded::Operations::PostV1CompaniesCompanyUuidContractorsResponse) }
    def create(company_uuid, request_body, x_gusto_api_version = nil)
      # create - Create a contractor
      # Create an individual or business contractor.
      # 
      # scope: `contractors:manage`
      request = ::GustoEmbedded::Operations::PostV1CompaniesCompanyUuidContractorsRequest.new(
        
        company_uuid: company_uuid,
        request_body: request_body,
        x_gusto_api_version: x_gusto_api_version
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::GustoEmbedded::Operations::PostV1CompaniesCompanyUuidContractorsRequest,
        base_url,
        '/v1/companies/{company_uuid}/contractors',
        request
      )
      headers = Utils.get_headers(request)
      req_content_type, data, form = Utils.serialize_request_body(request, :request_body, :json)
      headers['content-type'] = req_content_type
      raise StandardError, 'request body is required' if data.nil? && form.nil?
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.post(url) do |req|
        req.headers = headers
        security = !@sdk_configuration.nil? && !@sdk_configuration.security_source.nil? ? @sdk_configuration.security_source.call : nil
        Utils.configure_request_security(req, security) if !security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::GustoEmbedded::Operations::PostV1CompaniesCompanyUuidContractorsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 201
        if Utils.match_content_type(content_type, 'application/json')
          out = Crystalline.unmarshal_json(JSON.parse(r.env.response_body), ::GustoEmbedded::Shared::Contractor)
          res.contractor = out
        end
      elsif r.status == 404
      elsif r.status == 422
        if Utils.match_content_type(content_type, 'application/json')
          out = Crystalline.unmarshal_json(JSON.parse(r.env.response_body), ::GustoEmbedded::Shared::UnprocessableEntityErrorObject)
          res.unprocessable_entity_error_object = out
        end
      end

      res
    end


    sig { params(request: T.nilable(::GustoEmbedded::Operations::GetV1CompaniesCompanyUuidContractorsRequest)).returns(::GustoEmbedded::Operations::GetV1CompaniesCompanyUuidContractorsResponse) }
    def list(request)
      # list - Get contractors of a company
      # Get all contractors, active and inactive, individual and business, for a company.
      # 
      # scope: `contractors:read`
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::GustoEmbedded::Operations::GetV1CompaniesCompanyUuidContractorsRequest,
        base_url,
        '/v1/companies/{company_uuid}/contractors',
        request
      )
      headers = Utils.get_headers(request)
      query_params = Utils.get_query_params(::GustoEmbedded::Operations::GetV1CompaniesCompanyUuidContractorsRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        security = !@sdk_configuration.nil? && !@sdk_configuration.security_source.nil? ? @sdk_configuration.security_source.call : nil
        Utils.configure_request_security(req, security) if !security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::GustoEmbedded::Operations::GetV1CompaniesCompanyUuidContractorsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Crystalline.unmarshal_json(JSON.parse(r.env.response_body), T::Array[::GustoEmbedded::Shared::Contractor])
          res.contractor_list = out
        end
      elsif r.status == 404
      end

      res
    end


    sig { params(contractor_uuid: ::String, x_gusto_api_version: T.nilable(::GustoEmbedded::Shared::VersionHeader)).returns(::GustoEmbedded::Operations::GetV1ContractorsContractorUuidResponse) }
    def get(contractor_uuid, x_gusto_api_version = nil)
      # get - Get a contractor
      # Get a contractor.
      # 
      # scope: `contractors:read`
      request = ::GustoEmbedded::Operations::GetV1ContractorsContractorUuidRequest.new(
        
        contractor_uuid: contractor_uuid,
        x_gusto_api_version: x_gusto_api_version
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::GustoEmbedded::Operations::GetV1ContractorsContractorUuidRequest,
        base_url,
        '/v1/contractors/{contractor_uuid}',
        request
      )
      headers = Utils.get_headers(request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        security = !@sdk_configuration.nil? && !@sdk_configuration.security_source.nil? ? @sdk_configuration.security_source.call : nil
        Utils.configure_request_security(req, security) if !security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::GustoEmbedded::Operations::GetV1ContractorsContractorUuidResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Crystalline.unmarshal_json(JSON.parse(r.env.response_body), ::GustoEmbedded::Shared::Contractor)
          res.contractor = out
        end
      elsif r.status == 404
      end

      res
    end


    sig { params(contractor_uuid: ::String, request_body: ::GustoEmbedded::Operations::PutV1ContractorsContractorUuidRequestBody, x_gusto_api_version: T.nilable(::GustoEmbedded::Shared::VersionHeader)).returns(::GustoEmbedded::Operations::PutV1ContractorsContractorUuidResponse) }
    def update(contractor_uuid, request_body, x_gusto_api_version = nil)
      # update - Update a contractor
      # Update a contractor.
      # 
      # scope: `contractors:write`
      # 
      # > ðŸš§ Warning
      # >
      # > Watch out when changing a contractor's type (when the contractor is finished onboarding). Specifically, changing contractor type can be dangerous since Gusto wonâ€™t recognize and file two separate 1099s if they simply change from business to individual
      request = ::GustoEmbedded::Operations::PutV1ContractorsContractorUuidRequest.new(
        
        contractor_uuid: contractor_uuid,
        request_body: request_body,
        x_gusto_api_version: x_gusto_api_version
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::GustoEmbedded::Operations::PutV1ContractorsContractorUuidRequest,
        base_url,
        '/v1/contractors/{contractor_uuid}',
        request
      )
      headers = Utils.get_headers(request)
      req_content_type, data, form = Utils.serialize_request_body(request, :request_body, :json)
      headers['content-type'] = req_content_type
      raise StandardError, 'request body is required' if data.nil? && form.nil?
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.put(url) do |req|
        req.headers = headers
        security = !@sdk_configuration.nil? && !@sdk_configuration.security_source.nil? ? @sdk_configuration.security_source.call : nil
        Utils.configure_request_security(req, security) if !security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::GustoEmbedded::Operations::PutV1ContractorsContractorUuidResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Crystalline.unmarshal_json(JSON.parse(r.env.response_body), ::GustoEmbedded::Shared::Contractor)
          res.contractor = out
        end
      elsif r.status == 404
      elsif r.status == 422
        if Utils.match_content_type(content_type, 'application/json')
          out = Crystalline.unmarshal_json(JSON.parse(r.env.response_body), ::GustoEmbedded::Shared::UnprocessableEntityErrorObject)
          res.unprocessable_entity_error_object = out
        end
      end

      res
    end


    sig { params(contractor_uuid: ::String, x_gusto_api_version: T.nilable(::GustoEmbedded::Shared::VersionHeader)).returns(::GustoEmbedded::Operations::DeleteV1ContractorsContractorUuidResponse) }
    def delete(contractor_uuid, x_gusto_api_version = nil)
      # delete - Delete a contractor
      # A contractor can only be deleted when there are no contractor payments.
      # 
      # scope: `contractors:manage`
      request = ::GustoEmbedded::Operations::DeleteV1ContractorsContractorUuidRequest.new(
        
        contractor_uuid: contractor_uuid,
        x_gusto_api_version: x_gusto_api_version
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::GustoEmbedded::Operations::DeleteV1ContractorsContractorUuidRequest,
        base_url,
        '/v1/contractors/{contractor_uuid}',
        request
      )
      headers = Utils.get_headers(request)
      headers['Accept'] = '*/*'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.delete(url) do |req|
        req.headers = headers
        security = !@sdk_configuration.nil? && !@sdk_configuration.security_source.nil? ? @sdk_configuration.security_source.call : nil
        Utils.configure_request_security(req, security) if !security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::GustoEmbedded::Operations::DeleteV1ContractorsContractorUuidResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 204
      elsif r.status == 404
      end

      res
    end


    sig { params(contractor_uuid: ::String, x_gusto_api_version: T.nilable(::GustoEmbedded::Shared::VersionHeader)).returns(::GustoEmbedded::Operations::GetV1ContractorsContractorUuidOnboardingStatusResponse) }
    def get_onboarding_status(contractor_uuid, x_gusto_api_version = nil)
      # get_onboarding_status - Get the contractor's onboarding status
      # Retrieves a contractor's onboarding status. The data returned helps inform the required onboarding steps and respective completion status.
      # 
      # scope: `contractors:read`
      # 
      # ## onboarding_status
      # 
      # ### Admin-facilitated onboarding
      # | onboarding_status | Description |
      # |:------------------|------------:|
      # | `admin_onboarding_incomplete` | Admin needs to enter basic information about the contractor. |
      # | `admin_onboarding_review` | All information has been completed and admin needs to confirm onboarding. |
      # | `onboarding_completed` | Contractor has been fully onboarded and verified. |
      # 
      # ### Contractor self-onboarding
      # 
      # | onboarding_status | Description |
      # | --- | ----------- |
      # | `admin_onboarding_incomplete` | Admin needs to enter basic information about the contractor. |
      # | `self_onboarding_not_invited` | Admin has the intention to invite the contractor to self-onboard (e.g., marking a checkbox), but the system has not yet sent the invitation. |
      # | `self_onboarding_invited` | Contractor has been sent an invitation to self-onboard. |
      # | `self_onboarding_started` | Contractor has started the self-onboarding process. |
      # | `self_onboarding_review` | Admin needs to review contractors's entered information and confirm onboarding. |
      # | `onboarding_completed` | Contractor has been fully onboarded and verified. |
      # 
      # ## onboarding_steps
      # 
      # | onboarding_steps | Requirement(s) to be completed |
      # |:-----------------|-------------------------------:|
      # | `basic_details` | Add individual contractor's first name, last name, social security number or Business name and EIN depending on the contractor type |
      # | `add_address` | Add contractor address. |
      # | `compensation_details` | Add contractor compensation. |
      # | `payment_details` | Set up contractor's direct deposit or set to check. |
      # | `sign_documents` | Contractor forms (e.g., W9) are generated & signed. |
      # | `file_new_hire_report` | Contractor new hire report is generated. |
      request = ::GustoEmbedded::Operations::GetV1ContractorsContractorUuidOnboardingStatusRequest.new(
        
        contractor_uuid: contractor_uuid,
        x_gusto_api_version: x_gusto_api_version
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::GustoEmbedded::Operations::GetV1ContractorsContractorUuidOnboardingStatusRequest,
        base_url,
        '/v1/contractors/{contractor_uuid}/onboarding_status',
        request
      )
      headers = Utils.get_headers(request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        security = !@sdk_configuration.nil? && !@sdk_configuration.security_source.nil? ? @sdk_configuration.security_source.call : nil
        Utils.configure_request_security(req, security) if !security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::GustoEmbedded::Operations::GetV1ContractorsContractorUuidOnboardingStatusResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Crystalline.unmarshal_json(JSON.parse(r.env.response_body), ::GustoEmbedded::Shared::ContractorOnboardingStatus)
          res.contractor_onboarding_status = out
        end
      elsif r.status == 404
      end

      res
    end


    sig { params(contractor_uuid: ::String, request_body: ::GustoEmbedded::Operations::PutV1ContractorsContractorUuidOnboardingStatusRequestBody, x_gusto_api_version: T.nilable(::GustoEmbedded::Shared::VersionHeader)).returns(::GustoEmbedded::Operations::PutV1ContractorsContractorUuidOnboardingStatusResponse) }
    def update_onboarding_status(contractor_uuid, request_body, x_gusto_api_version = nil)
      # update_onboarding_status - Change the contractor's onboarding status
      # Updates a contractor's onboarding status.
      # 
      # scope: `contractors:write`
      # 
      # Below is a list of valid onboarding status changes depending on the intended action to be performed on behalf of the contractor.
      # 
      # | Action | current onboarding_status | new onboarding_status |
      # |:------------------|:------------:|----------:|
      # | Mark a contractor as self-onboarding | `admin_onboarding_incomplete` | `self_onboarding_not_invited` |
      # | Invite a contractor to self-onboard | `admin_onboarding_incomplete` or `self_onboarding_not_invited` | `self_onboarding_invited` |
      # | Cancel a contractor's self-onboarding | `self_onboarding_invited` or `self_onboarding_not_invited` | `admin_onboarding_incomplete` |
      # | Review a contractor's self-onboarded info | `self_onboarding_started` | `self_onboarding_review` |
      # | Finish a contractor's onboarding | `admin_onboarding_review` or `self_onboarding_review` | `onboarding_completed` |
      request = ::GustoEmbedded::Operations::PutV1ContractorsContractorUuidOnboardingStatusRequest.new(
        
        contractor_uuid: contractor_uuid,
        request_body: request_body,
        x_gusto_api_version: x_gusto_api_version
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::GustoEmbedded::Operations::PutV1ContractorsContractorUuidOnboardingStatusRequest,
        base_url,
        '/v1/contractors/{contractor_uuid}/onboarding_status',
        request
      )
      headers = Utils.get_headers(request)
      req_content_type, data, form = Utils.serialize_request_body(request, :request_body, :json)
      headers['content-type'] = req_content_type
      raise StandardError, 'request body is required' if data.nil? && form.nil?
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.put(url) do |req|
        req.headers = headers
        security = !@sdk_configuration.nil? && !@sdk_configuration.security_source.nil? ? @sdk_configuration.security_source.call : nil
        Utils.configure_request_security(req, security) if !security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::GustoEmbedded::Operations::PutV1ContractorsContractorUuidOnboardingStatusResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Crystalline.unmarshal_json(JSON.parse(r.env.response_body), ::GustoEmbedded::Shared::ContractorOnboardingStatus)
          res.contractor_onboarding_status = out
        end
      elsif r.status == 404
      elsif r.status == 422
        if Utils.match_content_type(content_type, 'application/json')
          out = Crystalline.unmarshal_json(JSON.parse(r.env.response_body), ::GustoEmbedded::Shared::UnprocessableEntityErrorObject)
          res.unprocessable_entity_error_object = out
        end
      end

      res
    end


    sig { params(contractor_uuid: ::String, x_gusto_api_version: T.nilable(::GustoEmbedded::Shared::VersionHeader)).returns(::GustoEmbedded::Operations::GetV1ContractorsContractorUuidAddressResponse) }
    def get_address(contractor_uuid, x_gusto_api_version = nil)
      # get_address - Get a contractor address
      # The address of a contractor is used to determine certain tax information about them. Addresses are geocoded on create and update to ensure validity.
      # 
      # scope: `contractors:read`
      request = ::GustoEmbedded::Operations::GetV1ContractorsContractorUuidAddressRequest.new(
        
        contractor_uuid: contractor_uuid,
        x_gusto_api_version: x_gusto_api_version
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::GustoEmbedded::Operations::GetV1ContractorsContractorUuidAddressRequest,
        base_url,
        '/v1/contractors/{contractor_uuid}/address',
        request
      )
      headers = Utils.get_headers(request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        security = !@sdk_configuration.nil? && !@sdk_configuration.security_source.nil? ? @sdk_configuration.security_source.call : nil
        Utils.configure_request_security(req, security) if !security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::GustoEmbedded::Operations::GetV1ContractorsContractorUuidAddressResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Crystalline.unmarshal_json(JSON.parse(r.env.response_body), ::GustoEmbedded::Shared::ContractorAddress)
          res.contractor_address = out
        end
      elsif r.status == 404
      end

      res
    end


    sig { params(contractor_uuid: ::String, request_body: ::GustoEmbedded::Operations::PutV1ContractorsContractorUuidAddressRequestBody, x_gusto_api_version: T.nilable(::GustoEmbedded::Shared::VersionHeader)).returns(::GustoEmbedded::Operations::PutV1ContractorsContractorUuidAddressResponse) }
    def update_address(contractor_uuid, request_body, x_gusto_api_version = nil)
      # update_address - Update a contractor's address
      # The address of a contractor is used to determine certain tax information about them. Addresses are geocoded on create and update to ensure validity.
      # 
      # scope: `contractors:write`
      request = ::GustoEmbedded::Operations::PutV1ContractorsContractorUuidAddressRequest.new(
        
        contractor_uuid: contractor_uuid,
        request_body: request_body,
        x_gusto_api_version: x_gusto_api_version
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::GustoEmbedded::Operations::PutV1ContractorsContractorUuidAddressRequest,
        base_url,
        '/v1/contractors/{contractor_uuid}/address',
        request
      )
      headers = Utils.get_headers(request)
      req_content_type, data, form = Utils.serialize_request_body(request, :request_body, :json)
      headers['content-type'] = req_content_type
      raise StandardError, 'request body is required' if data.nil? && form.nil?
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.put(url) do |req|
        req.headers = headers
        security = !@sdk_configuration.nil? && !@sdk_configuration.security_source.nil? ? @sdk_configuration.security_source.call : nil
        Utils.configure_request_security(req, security) if !security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::GustoEmbedded::Operations::PutV1ContractorsContractorUuidAddressResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Crystalline.unmarshal_json(JSON.parse(r.env.response_body), ::GustoEmbedded::Shared::ContractorAddress)
          res.contractor_address = out
        end
      elsif r.status == 404
      elsif r.status == 422
        if Utils.match_content_type(content_type, 'application/json')
          out = Crystalline.unmarshal_json(JSON.parse(r.env.response_body), ::GustoEmbedded::Shared::UnprocessableEntityErrorObject)
          res.unprocessable_entity_error_object = out
        end
      end

      res
    end


    sig { params(company_id: ::String, contractor_uuid: T.nilable(::String), contractor_payment_group_uuid: T.nilable(::String), x_gusto_api_version: T.nilable(::GustoEmbedded::Operations::GetV1CompaniesCompanyIdContractorsPaymentDetailsHeaderXGustoAPIVersion)).returns(::GustoEmbedded::Operations::GetV1CompaniesCompanyIdContractorsPaymentDetailsResponse) }
    def get_v1_companies_company_id_contractors_payment_details(company_id, contractor_uuid = nil, contractor_payment_group_uuid = nil, x_gusto_api_version = nil)
      # get_v1_companies_company_id_contractors_payment_details - List contractor payment details
      # Get payment details for contractors in a company. This endpoint returns a list of all contractors associated with the specified company, including their payment methods and bank account details if they are paid via direct deposit.
      # 
      # For contractors paid by direct deposit, the response includes their bank account information.
      # 
      # For contractors paid by check, only the basic payment method information is returned.
      # 
      # `encrypted_account_number` is available only with the additional scope `contractor_payment_methods:read:account_numbers`.
      # 
      # scope: `contractor_payment_methods:read`
      # 
      request = ::GustoEmbedded::Operations::GetV1CompaniesCompanyIdContractorsPaymentDetailsRequest.new(
        
        company_id: company_id,
        contractor_uuid: contractor_uuid,
        contractor_payment_group_uuid: contractor_payment_group_uuid,
        x_gusto_api_version: x_gusto_api_version
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::GustoEmbedded::Operations::GetV1CompaniesCompanyIdContractorsPaymentDetailsRequest,
        base_url,
        '/v1/companies/{company_id}/contractors/payment_details',
        request
      )
      headers = Utils.get_headers(request)
      query_params = Utils.get_query_params(::GustoEmbedded::Operations::GetV1CompaniesCompanyIdContractorsPaymentDetailsRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        security = !@sdk_configuration.nil? && !@sdk_configuration.security_source.nil? ? @sdk_configuration.security_source.call : nil
        Utils.configure_request_security(req, security) if !security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::GustoEmbedded::Operations::GetV1CompaniesCompanyIdContractorsPaymentDetailsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Crystalline.unmarshal_json(JSON.parse(r.env.response_body), T::Array[::GustoEmbedded::Shared::ContractorPaymentDetailsList])
          res.contractor_payment_details_list = out
        end
      elsif r.status == 404
        if Utils.match_content_type(content_type, 'application/json')
          out = Crystalline.unmarshal_json(JSON.parse(r.env.response_body), ::GustoEmbedded::Shared::UnprocessableEntityErrorObject)
          res.unprocessable_entity_error_object = out
        end
      end

      res
    end
  end
end
