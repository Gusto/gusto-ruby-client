# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'faraday'
require 'faraday/multipart'
require 'sorbet-runtime'

module GustoEmbedded
  extend T::Sig

  SERVER_DEMO = :demo # Demo
  SERVER_PROD = :prod # Prod
  SERVERS = {
    demo: 'https://api.gusto-demo.com',
    prod: 'https://api.gusto.com',
  }.freeze
  # Contains the list of servers available to the SDK

  class SDKConfiguration < ::Crystalline::FieldAugmented
    extend T::Sig

    field :client, T.nilable(Faraday::Connection)
    field :security_source, T.nilable(T.proc.returns(T.nilable(::GustoEmbedded::Shared::Security)))
    field :server_url, T.nilable(String)
    field :server, Symbol
    field :language, String
    field :openapi_doc_version, String
    field :sdk_version, String
    field :gen_version, String
    field :user_agent, String



    sig { params(client: T.nilable(Faraday::Connection), security: T.nilable(::GustoEmbedded::Shared::Security), security_source: T.nilable(T.proc.returns(::GustoEmbedded::Shared::Security)), server_url: T.nilable(String), server: T.nilable(Symbol)).void }
    def initialize(client, security, security_source, server_url, server)
      @client = client
      @server_url = server_url
      @server = server.nil? ? SERVER_DEMO : server
      raise StandardError, "Invalid server \"#{server}\"" if !SERVERS.key?(@server)
      if !security_source.nil?
        @security_source = security_source
      elsif !security.nil?
        @security_source = -> { security }
      end
      @language = 'ruby'
      @openapi_doc_version = '2024-04-01'
      @sdk_version = '0.2.6'
      @gen_version = '2.545.4'
      @user_agent = 'speakeasy-sdk/ruby 0.2.6 2.545.4 2024-04-01 gusto_embedded_client'
    end

    sig { returns([String, T::Hash[Symbol, String]]) }
    def get_server_details
      return [@server_url.delete_suffix('/'), {}] if !@server_url.nil?
      [SERVERS[@server], {}]
    end
  end
end
