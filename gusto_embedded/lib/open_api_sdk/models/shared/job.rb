# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module OpenApiSDK
  module Shared
  
    # The representation of a job in Gusto.
    class Job < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig

      # The UUID of the job.
      field :uuid, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('uuid') } }

      field :compensations, T.nilable(T::Array[::OpenApiSDK::Shared::Compensation]), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('compensations') } }
      # The UUID of the current compensation of the job.
      field :current_compensation_uuid, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('current_compensation_uuid') } }
      # The UUID of the employee to which the job belongs.
      field :employee_uuid, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('employee_uuid') } }
      # The date when the employee was hired or rehired for the job.
      field :hire_date, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('hire_date') } }
      # The payment unit of the current compensation for the job.
      field :payment_unit, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('payment_unit') } }
      # Whether this is the employee's primary job. The value will be set to true unless an existing job exists for the employee.
      field :primary, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('primary') } }
      # The current compensation rate of the job.
      field :rate, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('rate') } }
      # The risk class code for workers' compensation in Washington state. Please visit [Washington state's Risk Class page](https://www.lni.wa.gov/insurance/rates-risk-classes/risk-classes-for-workers-compensation/risk-class-lookup#/) to learn more.
      field :state_wc_class_code, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('state_wc_class_code') } }
      # Whether this job is eligible for workers' compensation coverage in the state of Washington (WA).
      field :state_wc_covered, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('state_wc_covered') } }
      # The title for the job.
      field :title, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('title') } }
      # Whether the employee owns at least 2% of the company.
      field :two_percent_shareholder, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('two_percent_shareholder') } }
      # The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
      field :version, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('version') } }


      sig { params(uuid: ::String, compensations: T.nilable(T::Array[::OpenApiSDK::Shared::Compensation]), current_compensation_uuid: T.nilable(::String), employee_uuid: T.nilable(::String), hire_date: T.nilable(::String), payment_unit: T.nilable(::String), primary: T.nilable(T::Boolean), rate: T.nilable(::String), state_wc_class_code: T.nilable(::String), state_wc_covered: T.nilable(T::Boolean), title: T.nilable(::String), two_percent_shareholder: T.nilable(T::Boolean), version: T.nilable(::String)).void }
      def initialize(uuid: nil, compensations: nil, current_compensation_uuid: nil, employee_uuid: nil, hire_date: nil, payment_unit: nil, primary: nil, rate: nil, state_wc_class_code: nil, state_wc_covered: nil, title: nil, two_percent_shareholder: nil, version: nil)
        @uuid = uuid
        @compensations = compensations
        @current_compensation_uuid = current_compensation_uuid
        @employee_uuid = employee_uuid
        @hire_date = hire_date
        @payment_unit = payment_unit
        @primary = primary
        @rate = rate
        @state_wc_class_code = state_wc_class_code
        @state_wc_covered = state_wc_covered
        @title = title
        @two_percent_shareholder = two_percent_shareholder
        @version = version
      end
    end
  end
end
