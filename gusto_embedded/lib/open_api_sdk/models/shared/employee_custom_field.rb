# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module OpenApiSDK
  module Shared
  
    # A custom field of an employee
    class EmployeeCustomField < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig

      # This is the id of the response object from when you get the company custom fields
      field :company_custom_field_id, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('company_custom_field_id') } }

      field :id, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('id') } }

      field :name, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('name') } }
      # Input type for the custom field.
      field :type, ::OpenApiSDK::Shared::CustomFieldType, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('type'), 'decoder': Utils.enum_from_string(::OpenApiSDK::Shared::CustomFieldType, false) } }

      field :value, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('value') } }

      field :description, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('description') } }
      # An array of options for fields of type radio. Otherwise, null.
      field :selection_options, T.nilable(T::Array[::String]), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('selection_options') } }


      sig { params(company_custom_field_id: ::String, id: ::String, name: ::String, type: ::OpenApiSDK::Shared::CustomFieldType, value: ::String, description: T.nilable(::String), selection_options: T.nilable(T::Array[::String])).void }
      def initialize(company_custom_field_id: nil, id: nil, name: nil, type: nil, value: nil, description: nil, selection_options: nil)
        @company_custom_field_id = company_custom_field_id
        @id = id
        @name = name
        @type = type
        @value = value
        @description = description
        @selection_options = selection_options
      end
    end
  end
end
