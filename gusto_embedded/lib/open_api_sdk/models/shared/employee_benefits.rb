# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module OpenApiSDK
  module Shared
  

    class EmployeeBenefits < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig

      # Whether the employee benefit is active.
      field :active, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('active') } }
      # The UUID of the company benefit.
      field :company_benefit_uuid, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('company_benefit_uuid') } }
      # The value of the company contribution
      field :company_contribution, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('company_contribution') } }
      # An object representing the type and value of the company contribution.
      field :contribution, T.nilable(::OpenApiSDK::Shared::CompanyBenefitWithEmployeeBenefitsContribution), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('contribution') } }
      # Whether the employee deduction amount should be treated as a percentage to be deducted from each payroll.
      field :deduct_as_percentage, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('deduct_as_percentage') } }
      # The amount to be deducted, per pay period, from the employee's pay.
      field :employee_deduction, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('employee_deduction') } }
      # The UUID of the employee to which the benefit belongs.
      field :employee_uuid, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('employee_uuid') } }

      field :uuid, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('uuid') } }


      sig { params(active: T.nilable(T::Boolean), company_benefit_uuid: T.nilable(::String), company_contribution: T.nilable(::String), contribution: T.nilable(::OpenApiSDK::Shared::CompanyBenefitWithEmployeeBenefitsContribution), deduct_as_percentage: T.nilable(T::Boolean), employee_deduction: T.nilable(::String), employee_uuid: T.nilable(::String), uuid: T.nilable(::String)).void }
      def initialize(active: nil, company_benefit_uuid: nil, company_contribution: nil, contribution: nil, deduct_as_percentage: nil, employee_deduction: nil, employee_uuid: nil, uuid: nil)
        @active = active
        @company_benefit_uuid = company_benefit_uuid
        @company_contribution = company_contribution
        @contribution = contribution
        @deduct_as_percentage = deduct_as_percentage
        @employee_deduction = employee_deduction
        @employee_uuid = employee_uuid
        @uuid = uuid
      end
    end
  end
end
