# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module OpenApiSDK
  module Shared
  
    # The representation of an address in Gusto.
    class Location < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig

      # The UUID of the location object.
      field :uuid, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('uuid') } }
      # The status of the location. Inactive locations have been deleted, but may still have historical data associated with them.
      field :active, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('active') } }

      field :city, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('city') } }
      # The UUID for the company to which the location belongs. Only included if the location belongs to a company.
      field :company_uuid, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('company_uuid') } }

      field :country, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('country') } }
      # Datetime for when location is created
      field :created_at, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('created_at') } }
      # Specifies if the location is the company's filing address. Only included if the location belongs to a company.
      field :filing_address, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('filing_address') } }
      # Specifies if the location is the company's mailing address. Only included if the location belongs to a company.
      field :mailing_address, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('mailing_address') } }
      # The phone number for the location. Required for company locations. Optional for employee locations.
      field :phone_number, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('phone_number') } }

      field :state, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('state') } }

      field :street_1, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('street_1') } }

      field :street_2, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('street_2') } }
      # Datetime for when location is updated
      field :updated_at, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('updated_at') } }
      # The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
      field :version, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('version') } }

      field :zip, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('zip') } }


      sig { params(uuid: ::String, active: T.nilable(T::Boolean), city: T.nilable(::String), company_uuid: T.nilable(::String), country: T.nilable(::String), created_at: T.nilable(::String), filing_address: T.nilable(T::Boolean), mailing_address: T.nilable(T::Boolean), phone_number: T.nilable(::String), state: T.nilable(::String), street_1: T.nilable(::String), street_2: T.nilable(::String), updated_at: T.nilable(::String), version: T.nilable(::String), zip: T.nilable(::String)).void }
      def initialize(uuid: nil, active: nil, city: nil, company_uuid: nil, country: nil, created_at: nil, filing_address: nil, mailing_address: nil, phone_number: nil, state: nil, street_1: nil, street_2: nil, updated_at: nil, version: nil, zip: nil)
        @uuid = uuid
        @active = active
        @city = city
        @company_uuid = company_uuid
        @country = country
        @created_at = created_at
        @filing_address = filing_address
        @mailing_address = mailing_address
        @phone_number = phone_number
        @state = state
        @street_1 = street_1
        @street_2 = street_2
        @updated_at = updated_at
        @version = version
        @zip = zip
      end
    end
  end
end
