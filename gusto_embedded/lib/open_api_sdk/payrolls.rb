# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'faraday'
require 'faraday/multipart'
require 'sorbet-runtime'

module OpenApiSDK
  extend T::Sig
  class Payrolls
    extend T::Sig


    sig { params(sdk_config: SDKConfiguration).void }
    def initialize(sdk_config)
      @sdk_configuration = sdk_config
    end


    sig { params(company_id: ::String, request_body: ::OpenApiSDK::Operations::PostV1CompaniesCompanyIdPayrollsRequestBody, x_gusto_api_version: T.nilable(::OpenApiSDK::Shared::VersionHeader)).returns(::OpenApiSDK::Operations::PostV1CompaniesCompanyIdPayrollsResponse) }
    def create_off_cycle(company_id, request_body, x_gusto_api_version = nil)
      # create_off_cycle - Create an off-cycle payroll
      # Creates a new, unprocessed, off-cycle payroll.
      # 
      # ## `off_cycle_reason`
      # By default:
      # - External benefits and deductions will be included when the `off_cycle_reason` is set to `Correction`.
      # - All benefits and deductions are blocked when the `off_cycle_reason` is set to `Bonus`.
      # 
      # These elections can be overridden with the `skip_regular_deductions` boolean.
      # 
      # scope: `payrolls:run`
      request = ::OpenApiSDK::Operations::PostV1CompaniesCompanyIdPayrollsRequest.new(
        
        company_id: company_id,
        request_body: request_body,
        x_gusto_api_version: x_gusto_api_version
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::PostV1CompaniesCompanyIdPayrollsRequest,
        base_url,
        '/v1/companies/{company_id}/payrolls',
        request
      )
      headers = Utils.get_headers(request)
      req_content_type, data, form = Utils.serialize_request_body(request, :request_body, :json)
      headers['content-type'] = req_content_type
      raise StandardError, 'request body is required' if data.nil? && form.nil?
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.post(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::PostV1CompaniesCompanyIdPayrollsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Shared::PayrollPrepared)
          res.payroll_prepared = out
        end
      elsif r.status == 404
      elsif r.status == 422
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Shared::UnprocessableEntityErrorObject)
          res.unprocessable_entity_error_object = out
        end
      end

      res
    end


    sig { params(request: T.nilable(::OpenApiSDK::Operations::GetV1CompaniesCompanyIdPayrollsRequest)).returns(::OpenApiSDK::Operations::GetV1CompaniesCompanyIdPayrollsResponse) }
    def list(request)
      # list - Get all payrolls for a company
      # Returns a list of payrolls for a company. You can change the payrolls returned by updating the processing_status, payroll_types, start_date, & end_date params.
      # 
      # By default, will return processed, regular payrolls for the past 6 months.
      # 
      # Notes:
      # * Dollar amounts are returned as string representations of numeric decimals, are represented to the cent.
      # * end_date can be at most 3 months in the future and start_date and end_date can't be more than 1 year apart.
      # 
      # scope: `payrolls:read`
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::GetV1CompaniesCompanyIdPayrollsRequest,
        base_url,
        '/v1/companies/{company_id}/payrolls',
        request
      )
      headers = Utils.get_headers(request)
      query_params = Utils.get_query_params(::OpenApiSDK::Operations::GetV1CompaniesCompanyIdPayrollsRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::GetV1CompaniesCompanyIdPayrollsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, T::Array[::OpenApiSDK::Shared::PayrollMinimal])
          res.payroll_list = out
        end
      elsif r.status == 404
      end

      res
    end


    sig { params(company_id: ::String, page: T.nilable(::Float), per: T.nilable(::Float), x_gusto_api_version: T.nilable(::OpenApiSDK::Shared::VersionHeader)).returns(::OpenApiSDK::Operations::GetV1CompaniesCompanyIdPayrollReversalsResponse) }
    def get_approved_reversals(company_id, page = nil, per = nil, x_gusto_api_version = nil)
      # get_approved_reversals - Get approved payroll reversals
      # Returns all approved Payroll Reversals for a Company.
      # 
      # scope: `payrolls:read`
      request = ::OpenApiSDK::Operations::GetV1CompaniesCompanyIdPayrollReversalsRequest.new(
        
        company_id: company_id,
        page: page,
        per: per,
        x_gusto_api_version: x_gusto_api_version
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::GetV1CompaniesCompanyIdPayrollReversalsRequest,
        base_url,
        '/v1/companies/{company_id}/payroll_reversals',
        request
      )
      headers = Utils.get_headers(request)
      query_params = Utils.get_query_params(::OpenApiSDK::Operations::GetV1CompaniesCompanyIdPayrollReversalsRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::GetV1CompaniesCompanyIdPayrollReversalsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Shared::PayrollReversal)
          res.payroll_reversal = out
        end
      elsif r.status == 404
      end

      res
    end


    sig { params(company_id: ::String, payroll_id: ::String, include: T.nilable(T::Array[::OpenApiSDK::Operations::GetV1CompaniesCompanyIdPayrollsPayrollIdQueryParamInclude]), x_gusto_api_version: T.nilable(::OpenApiSDK::Shared::VersionHeader)).returns(::OpenApiSDK::Operations::GetV1CompaniesCompanyIdPayrollsPayrollIdResponse) }
    def get(company_id, payroll_id, include = nil, x_gusto_api_version = nil)
      # get - Get a single payroll
      # Returns a payroll. If payroll is calculated or processed, will return employee_compensations and totals.
      # 
      # Notes:
      # * Hour and dollar amounts are returned as string representations of numeric decimals.
      # * Hours are represented to the thousands place; dollar amounts are represented to the cent.
      # * Every eligible compensation is returned for each employee. If no data has yet be inserted for a given field, it defaults to “0.00” (for fixed amounts) or “0.000” (for hours ).
      # * To return future payrolls, you must include an `end_date` in the future.
      # * When include parameter with benefits value is passed, employee_benefits:read scope is required to return benefits
      #   * Benefits containing PHI are only visible with the `employee_benefits:read:phi` scope
      # 
      # scope: `payrolls:read`
      request = ::OpenApiSDK::Operations::GetV1CompaniesCompanyIdPayrollsPayrollIdRequest.new(
        
        company_id: company_id,
        payroll_id: payroll_id,
        include: include,
        x_gusto_api_version: x_gusto_api_version
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::GetV1CompaniesCompanyIdPayrollsPayrollIdRequest,
        base_url,
        '/v1/companies/{company_id}/payrolls/{payroll_id}',
        request
      )
      headers = Utils.get_headers(request)
      query_params = Utils.get_query_params(::OpenApiSDK::Operations::GetV1CompaniesCompanyIdPayrollsPayrollIdRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::GetV1CompaniesCompanyIdPayrollsPayrollIdResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Shared::Payroll)
          res.payroll = out
        end
      elsif r.status == 404
      end

      res
    end


    sig { params(company_id: ::String, payroll_id: ::String, request_body: ::OpenApiSDK::Operations::PutV1CompaniesCompanyIdPayrollsRequestBody, x_gusto_api_version: T.nilable(::OpenApiSDK::Shared::VersionHeader)).returns(::OpenApiSDK::Operations::PutV1CompaniesCompanyIdPayrollsResponse) }
    def update(company_id, payroll_id, request_body, x_gusto_api_version = nil)
      # update - Update a payroll by ID
      # This endpoint allows you to update information for one or more employees for a specific **unprocessed** payroll.  You can think of the **unprocessed**
      # payroll object as a template of fields that you can update.  You cannot modify the structure of the payroll object through this endpoint, only values
      # of the fields included in the payroll.  If you do not include specific employee compensations or fixed/hourly compensations in your request body, they
      # will not be removed from the payroll.
      # 
      # scope: `payrolls:write`
      request = ::OpenApiSDK::Operations::PutV1CompaniesCompanyIdPayrollsRequest.new(
        
        company_id: company_id,
        payroll_id: payroll_id,
        request_body: request_body,
        x_gusto_api_version: x_gusto_api_version
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::PutV1CompaniesCompanyIdPayrollsRequest,
        base_url,
        '/v1/companies/{company_id}/payrolls/{payroll_id}',
        request
      )
      headers = Utils.get_headers(request)
      req_content_type, data, form = Utils.serialize_request_body(request, :request_body, :json)
      headers['content-type'] = req_content_type
      raise StandardError, 'request body is required' if data.nil? && form.nil?
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.put(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::PutV1CompaniesCompanyIdPayrollsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Shared::PayrollPrepared)
          res.payroll_prepared = out
        end
      elsif r.status == 404
      elsif r.status == 422
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Shared::UnprocessableEntityErrorObject)
          res.unprocessable_entity_error_object = out
        end
      end

      res
    end


    sig { params(company_id: ::String, payroll_id: ::String, async: T.nilable(T::Boolean), x_gusto_api_version: T.nilable(::OpenApiSDK::Shared::VersionHeader)).returns(::OpenApiSDK::Operations::DeleteV1CompaniesCompanyIdPayrollsResponse) }
    def delete(company_id, payroll_id, async = nil, x_gusto_api_version = nil)
      # delete - Delete a payroll
      # This endpoint allows you to delete an **unprocessed** payroll.
      # 
      # By default the payroll and associated data is deleted synchronously. To request an asynchronous delete, use the `async=true` query parameter. In both cases validation of ability to delete will be performed and an Unprocessable Entity error will be returned if the payroll is not able to be deleted. A successful synchronous delete will return `204/No Content`. When a payroll has been enqueued for asynchronous deletion, `202/Accepted` will be returned.
      # 
      # scope: `payrolls:run`
      request = ::OpenApiSDK::Operations::DeleteV1CompaniesCompanyIdPayrollsRequest.new(
        
        company_id: company_id,
        payroll_id: payroll_id,
        async: async,
        x_gusto_api_version: x_gusto_api_version
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::DeleteV1CompaniesCompanyIdPayrollsRequest,
        base_url,
        '/v1/companies/{company_id}/payrolls/{payroll_id}',
        request
      )
      headers = Utils.get_headers(request)
      query_params = Utils.get_query_params(::OpenApiSDK::Operations::DeleteV1CompaniesCompanyIdPayrollsRequest, request)
      headers['Accept'] = '*/*'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.delete(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::DeleteV1CompaniesCompanyIdPayrollsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if [202, 204].include?(r.status)
      elsif [404, 422].include?(r.status)
      end

      res
    end


    sig { params(company_id: ::String, payroll_id: ::String, x_gusto_api_version: T.nilable(::OpenApiSDK::Shared::VersionHeader)).returns(::OpenApiSDK::Operations::PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareResponse) }
    def prepare(company_id, payroll_id, x_gusto_api_version = nil)
      # prepare - Prepare a payroll for update
      # This endpoint will build the payroll and get it ready for making updates. This includes adding/removing eligible employees from the Payroll and updating the check_date, payroll_deadline, and payroll_status_meta dates & times.
      # 
      # Notes:
      #  * Will null out calculated_at & totals if a payroll has already been calculated.
      #  * Will return the version param used for updating the payroll
      # 
      # scope: `payrolls:write`
      request = ::OpenApiSDK::Operations::PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareRequest.new(
        
        company_id: company_id,
        payroll_id: payroll_id,
        x_gusto_api_version: x_gusto_api_version
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareRequest,
        base_url,
        '/v1/companies/{company_id}/payrolls/{payroll_id}/prepare',
        request
      )
      headers = Utils.get_headers(request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.put(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Shared::PayrollPrepared)
          res.payroll_prepared = out
        end
      elsif r.status == 404
      end

      res
    end


    sig { params(payroll_uuid: ::String, x_gusto_api_version: T.nilable(::OpenApiSDK::Shared::VersionHeader)).returns(::OpenApiSDK::Operations::GetV1PaymentReceiptsPayrollsPayrollUuidResponse) }
    def get_receipt(payroll_uuid, x_gusto_api_version = nil)
      # get_receipt - Get a single payroll receipt
      # Returns a payroll receipt.
      # 
      # Notes:
      # * Hour and dollar amounts are returned as string representations of numeric decimals.
      # * Dollar amounts are represented to the cent.
      # * If no data has yet be inserted for a given field, it defaults to “0.00” (for fixed amounts).
      # 
      # scope: `payrolls:read`
      request = ::OpenApiSDK::Operations::GetV1PaymentReceiptsPayrollsPayrollUuidRequest.new(
        
        payroll_uuid: payroll_uuid,
        x_gusto_api_version: x_gusto_api_version
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::GetV1PaymentReceiptsPayrollsPayrollUuidRequest,
        base_url,
        '/v1/payrolls/{payroll_uuid}/receipt',
        request
      )
      headers = Utils.get_headers(request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::GetV1PaymentReceiptsPayrollsPayrollUuidResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Shared::PayrollReceipt)
          res.payroll_receipt = out
        end
      elsif r.status == 404
      end

      res
    end


    sig { params(company_uuid: ::String, x_gusto_api_version: T.nilable(::OpenApiSDK::Shared::VersionHeader)).returns(::OpenApiSDK::Operations::GetV1CompaniesPayrollBlockersCompanyUuidResponse) }
    def get_blockers(company_uuid, x_gusto_api_version = nil)
      # get_blockers - Get all payroll blockers for a company
      # Returns a list of reasons that prevent the company from running payrolls. See the [payroll blockers guide](https://docs.gusto.com/embedded-payroll/docs/payroll-blockers) for a complete list of reasons.
      # 
      # The list is empty if there are no payroll blockers.
      # 
      # scope: `payrolls:run`
      request = ::OpenApiSDK::Operations::GetV1CompaniesPayrollBlockersCompanyUuidRequest.new(
        
        company_uuid: company_uuid,
        x_gusto_api_version: x_gusto_api_version
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::GetV1CompaniesPayrollBlockersCompanyUuidRequest,
        base_url,
        '/v1/companies/{company_uuid}/payrolls/blockers',
        request
      )
      headers = Utils.get_headers(request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::GetV1CompaniesPayrollBlockersCompanyUuidResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, T::Array[::OpenApiSDK::Shared::PayrollBlocker])
          res.payroll_blocker_list = out
        end
      elsif r.status == 404
      end

      res
    end


    sig { params(company_uuid: ::String, request_body: ::OpenApiSDK::Operations::PostCompaniesPayrollSkipCompanyUuidRequestBody, x_gusto_api_version: T.nilable(::OpenApiSDK::Shared::VersionHeader)).returns(::OpenApiSDK::Operations::PostCompaniesPayrollSkipCompanyUuidResponse) }
    def skip(company_uuid, request_body, x_gusto_api_version = nil)
      # skip - Skip a payroll
      # Submits a $0 payroll for employees associated with the pay schedule to skip payroll. This submission is asynchronous and a successful request responds with a 202 HTTP status. Upon success, the payroll is transitioned to the `processed` state.
      # 
      # If the company is blocked from running payroll due to issues like incomplete setup, missing information or other compliance issues, the response will be 422 Unprocessable Entity with a categorization of the blockers as described in the error responses.
      # 
      # scope: `payrolls:run`
      request = ::OpenApiSDK::Operations::PostCompaniesPayrollSkipCompanyUuidRequest.new(
        
        company_uuid: company_uuid,
        request_body: request_body,
        x_gusto_api_version: x_gusto_api_version
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::PostCompaniesPayrollSkipCompanyUuidRequest,
        base_url,
        '/v1/companies/{company_uuid}/payrolls/skip',
        request
      )
      headers = Utils.get_headers(request)
      req_content_type, data, form = Utils.serialize_request_body(request, :request_body, :json)
      headers['content-type'] = req_content_type
      raise StandardError, 'request body is required' if data.nil? && form.nil?
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.post(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::PostCompaniesPayrollSkipCompanyUuidResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 202
      elsif r.status == 404
      elsif r.status == 422
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::Object)
          res.one_of = out
        end
      end

      res
    end


    sig { params(payroll_uuid: ::String, request_body: ::OpenApiSDK::Operations::PostPayrollsGrossUpPayrollUuidRequestBody, x_gusto_api_version: T.nilable(::OpenApiSDK::Shared::VersionHeader)).returns(::OpenApiSDK::Operations::PostPayrollsGrossUpPayrollUuidResponse) }
    def calculate_gross_up(payroll_uuid, request_body, x_gusto_api_version = nil)
      # calculate_gross_up - Calculate gross up
      # Calculates gross up earnings for an employee's payroll, given net earnings. This endpoint is only applicable to off-cycle unprocessed payrolls.
      # 
      # The gross up amount must then be mapped to the corresponding fixed compensation earning type to get the correct payroll amount. For example, for bonus off-cycles, the gross up amount should be set with the Bonus earning type in the payroll `fixed_compensations` field.
      # 
      # scope: `payrolls:run`
      request = ::OpenApiSDK::Operations::PostPayrollsGrossUpPayrollUuidRequest.new(
        
        payroll_uuid: payroll_uuid,
        request_body: request_body,
        x_gusto_api_version: x_gusto_api_version
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::PostPayrollsGrossUpPayrollUuidRequest,
        base_url,
        '/v1/payrolls/{payroll_uuid}/gross_up',
        request
      )
      headers = Utils.get_headers(request)
      req_content_type, data, form = Utils.serialize_request_body(request, :request_body, :json)
      headers['content-type'] = req_content_type
      raise StandardError, 'request body is required' if data.nil? && form.nil?
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.post(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::PostPayrollsGrossUpPayrollUuidResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Shared::GrossUpPay)
          res.gross_up_pay = out
        end
      elsif r.status == 404
      elsif r.status == 422
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::Object)
          res.one_of = out
        end
      end

      res
    end


    sig { params(company_id: ::String, payroll_id: ::String, x_gusto_api_version: T.nilable(::OpenApiSDK::Shared::VersionHeader)).returns(::OpenApiSDK::Operations::PutV1CompaniesCompanyIdPayrollsPayrollIdCalculateResponse) }
    def calculate(company_id, payroll_id, x_gusto_api_version = nil)
      # calculate - Calculate a payroll
      # Performs calculations for taxes, benefits, and deductions for an unprocessed payroll. The calculated payroll details provide a preview of the actual values that will be used when the payroll is run.
      # 
      # This calculation is asynchronous and a successful request responds with a 202 HTTP status. To view the details of the calculated payroll, use the GET /v1/companies/{company_id}/payrolls/{payroll_id} endpoint with *include=taxes,benefits,deductions* params.
      # In v2023-04-01, *show_calculation=true* is no longer required.
      # 
      # If the company is blocked from running payroll due to issues like incomplete setup, missing information or other compliance issues, the response will be 422 Unprocessable Entity with a categorization of the blockers as described in the error responses.
      request = ::OpenApiSDK::Operations::PutV1CompaniesCompanyIdPayrollsPayrollIdCalculateRequest.new(
        
        company_id: company_id,
        payroll_id: payroll_id,
        x_gusto_api_version: x_gusto_api_version
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::PutV1CompaniesCompanyIdPayrollsPayrollIdCalculateRequest,
        base_url,
        '/v1/companies/{company_id}/payrolls/{payroll_id}/calculate',
        request
      )
      headers = Utils.get_headers(request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.put(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::PutV1CompaniesCompanyIdPayrollsPayrollIdCalculateResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 202
      elsif r.status == 404
      elsif r.status == 422
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::Object)
          res.one_of = out
        end
      end

      res
    end


    sig { params(company_id: ::String, payroll_id: ::String, request_body: ::OpenApiSDK::Operations::PutV1CompaniesCompanyIdPayrollsPayrollIdSubmitRequestBody, x_gusto_api_version: T.nilable(::OpenApiSDK::Shared::VersionHeader)).returns(::OpenApiSDK::Operations::PutV1CompaniesCompanyIdPayrollsPayrollIdSubmitResponse) }
    def submit(company_id, payroll_id, request_body, x_gusto_api_version = nil)
      # submit - Submit payroll
      # Submits an unprocessed payroll to be calculated and run. This submission is asynchronous and a successful request responds with a 202 HTTP status. Upon success, transitions the payroll to the `processed` state.
      # 
      # You should poll to ensure that payroll is processed successfully, as async errors only occur after async processing is complete.
      # 
      # If the company is blocked from running payroll due to issues like incomplete setup, missing information or other compliance issues, the response will be 422 Unprocessable Entity with a categorization of the blockers as described in the error responses.
      # 
      # scope: `payrolls:run`
      request = ::OpenApiSDK::Operations::PutV1CompaniesCompanyIdPayrollsPayrollIdSubmitRequest.new(
        
        company_id: company_id,
        payroll_id: payroll_id,
        request_body: request_body,
        x_gusto_api_version: x_gusto_api_version
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::PutV1CompaniesCompanyIdPayrollsPayrollIdSubmitRequest,
        base_url,
        '/v1/companies/{company_id}/payrolls/{payroll_id}/submit',
        request
      )
      headers = Utils.get_headers(request)
      req_content_type, data, form = Utils.serialize_request_body(request, :request_body, :json)
      headers['content-type'] = req_content_type
      raise StandardError, 'request body is required' if data.nil? && form.nil?
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.put(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::PutV1CompaniesCompanyIdPayrollsPayrollIdSubmitResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 202
      elsif r.status == 404
      elsif r.status == 422
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::Object)
          res.one_of = out
        end
      end

      res
    end


    sig { params(company_id: ::String, payroll_id: ::String, x_gusto_api_version: T.nilable(::OpenApiSDK::Shared::VersionHeader)).returns(::OpenApiSDK::Operations::PutApiV1CompaniesCompanyIdPayrollsPayrollIdCancelResponse) }
    def cancel(company_id, payroll_id, x_gusto_api_version = nil)
      # cancel - Cancel a payroll
      # Transitions a `processed` payroll back to the `unprocessed` state. A payroll can be canceled if it meets both criteria:
      # - `processed` is true
      # - Current time is earlier than 3:30pm PT on the payroll_deadline
      # 
      # scope: `payrolls:run`
      # 
      request = ::OpenApiSDK::Operations::PutApiV1CompaniesCompanyIdPayrollsPayrollIdCancelRequest.new(
        
        company_id: company_id,
        payroll_id: payroll_id,
        x_gusto_api_version: x_gusto_api_version
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::PutApiV1CompaniesCompanyIdPayrollsPayrollIdCancelRequest,
        base_url,
        '/v1/companies/{company_id}/payrolls/{payroll_id}/cancel',
        request
      )
      headers = Utils.get_headers(request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.put(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::PutApiV1CompaniesCompanyIdPayrollsPayrollIdCancelResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Shared::Payroll)
          res.payroll = out
        end
      elsif r.status == 404
      elsif r.status == 422
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Shared::UnprocessableEntityErrorObject)
          res.unprocessable_entity_error_object = out
        end
      end

      res
    end


    sig { params(payroll_id: ::String, employee_id: ::String, x_gusto_api_version: T.nilable(::OpenApiSDK::Shared::VersionHeader)).returns(::OpenApiSDK::Operations::GetV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubResponse) }
    def get_pay_stub(payroll_id, employee_id, x_gusto_api_version = nil)
      # get_pay_stub - Get an employee pay stub (pdf)
      # Get an employee's pay stub for the specified payroll. By default, an application/pdf response will be returned. No other content types are currently supported, but may be supported in the future.
      # 
      # scope: `pay_stubs:read`
      request = ::OpenApiSDK::Operations::GetV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubRequest.new(
        
        payroll_id: payroll_id,
        employee_id: employee_id,
        x_gusto_api_version: x_gusto_api_version
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::GetV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubRequest,
        base_url,
        '/v1/payrolls/{payroll_id}/employees/{employee_id}/pay_stub',
        request
      )
      headers = Utils.get_headers(request)
      headers['Accept'] = '*/*'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::GetV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
      elsif r.status == 404
      end

      res
    end


    sig { params(employee_id: ::String, x_gusto_api_version: T.nilable(::OpenApiSDK::Shared::VersionHeader)).returns(::OpenApiSDK::Operations::GetV1EmployeesEmployeeUuidPayStubsResponse) }
    def get_pay_stubs(employee_id, x_gusto_api_version = nil)
      # get_pay_stubs - Get an employee's pay stubs
      # Get an employee's pay stubs
      # 
      # scope: `pay_stubs:read`
      request = ::OpenApiSDK::Operations::GetV1EmployeesEmployeeUuidPayStubsRequest.new(
        
        employee_id: employee_id,
        x_gusto_api_version: x_gusto_api_version
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::GetV1EmployeesEmployeeUuidPayStubsRequest,
        base_url,
        '/v1/employees/{employee_id}/pay_stubs',
        request
      )
      headers = Utils.get_headers(request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::GetV1EmployeesEmployeeUuidPayStubsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, T::Array[::OpenApiSDK::Shared::EmployeePayStub])
          res.employee_pay_stubs_list = out
        end
      elsif r.status == 404
      end

      res
    end


    sig { params(payroll_uuid: ::String, request_body: ::OpenApiSDK::Operations::PostV1PayrollsPayrollUuidGeneratedDocumentsPrintablePayrollChecksRequestBody, x_gusto_api_version: T.nilable(::OpenApiSDK::Shared::VersionHeader)).returns(::OpenApiSDK::Operations::PostV1PayrollsPayrollUuidGeneratedDocumentsPrintablePayrollChecksResponse) }
    def generate_printable_checks(payroll_uuid, request_body, x_gusto_api_version = nil)
      # generate_printable_checks - Generate printable payroll checks (pdf)
      # This endpoint initiates the generation of employee checks for the payroll specified by payroll_uuid. A generation status and corresponding request_uuid will be returned. Use the generated document GET endpoint with document_type: `printable_payroll_checks` and request_uuid to poll the check generation process and retrieve the generated check URL upon completion.
      # 
      # scope: `generated_documents:write`
      request = ::OpenApiSDK::Operations::PostV1PayrollsPayrollUuidGeneratedDocumentsPrintablePayrollChecksRequest.new(
        
        payroll_uuid: payroll_uuid,
        request_body: request_body,
        x_gusto_api_version: x_gusto_api_version
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::PostV1PayrollsPayrollUuidGeneratedDocumentsPrintablePayrollChecksRequest,
        base_url,
        '/v1/payrolls/{payroll_uuid}/generated_documents/printable_payroll_checks',
        request
      )
      headers = Utils.get_headers(request)
      req_content_type, data, form = Utils.serialize_request_body(request, :request_body, :json)
      headers['content-type'] = req_content_type
      raise StandardError, 'request body is required' if data.nil? && form.nil?
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.post(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::PostV1PayrollsPayrollUuidGeneratedDocumentsPrintablePayrollChecksResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Shared::PayrollCheck)
          res.payroll_check = out
        end
      elsif r.status == 404
      elsif r.status == 422
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Shared::UnprocessableEntityErrorObject)
          res.unprocessable_entity_error_object = out
        end
      end

      res
    end
  end
end
