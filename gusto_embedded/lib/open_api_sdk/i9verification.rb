# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'faraday'
require 'faraday/multipart'
require 'sorbet-runtime'

module OpenApiSDK
  extend T::Sig
  class I9Verification
    extend T::Sig


    sig { params(sdk_config: SDKConfiguration).void }
    def initialize(sdk_config)
      @sdk_configuration = sdk_config
    end


    sig { params(employee_id: ::String, x_gusto_api_version: T.nilable(::OpenApiSDK::Shared::VersionHeader)).returns(::OpenApiSDK::Operations::GetV1EmployeesEmployeeIdI9AuthorizationResponse) }
    def get_authorization(employee_id, x_gusto_api_version = nil)
      # get_authorization - Get an employee's I-9 authorization
      # An employee's I-9 authorization stores information about an employee's authorization status and I-9 signatures, information required to filled out the Form I-9 for employment eligibility verification.
      # 
      # **NOTE:** The `form_uuid` in responses from this endpoint can be used to retrieve the PDF version of the I-9. See the "get employee form PDF" request for more details.
      # 
      # scope: `i9_authorizations:read`
      request = ::OpenApiSDK::Operations::GetV1EmployeesEmployeeIdI9AuthorizationRequest.new(
        
        employee_id: employee_id,
        x_gusto_api_version: x_gusto_api_version
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::GetV1EmployeesEmployeeIdI9AuthorizationRequest,
        base_url,
        '/v1/employees/{employee_id}/i9_authorization',
        request
      )
      headers = Utils.get_headers(request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::GetV1EmployeesEmployeeIdI9AuthorizationResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Shared::I9Authorization)
          res.i9_authorization = out
        end
      elsif r.status == 404
      end

      res
    end


    sig { params(employee_id: ::String, request_body: ::OpenApiSDK::Operations::PutV1EmployeesEmployeeIdI9AuthorizationRequestBody, x_gusto_api_version: T.nilable(::OpenApiSDK::Shared::VersionHeader)).returns(::OpenApiSDK::Operations::PutV1EmployeesEmployeeIdI9AuthorizationResponse) }
    def update(employee_id, request_body, x_gusto_api_version = nil)
      # update - Create or update an employee's I-9 authorization
      # An employee's I-9 authorization stores information about an employee's authorization status, as well as signatures and other information required to complete the Form I-9 for employment eligibility verification.
      # 
      # If the version is supplied and the employee I-9 authorization exists, this endpoint acts as an update. Otherwise, it will create an employee I-9 authorization.
      # 
      # Validations on this endpoint are conditional:
      # 
      #   * `document_type` may be required, depending on `authorization_status`.
      #   * Valid formats for `document_number` vary, depending on `document_type`.
      #   * `country` is only allowed with `document_type: 'foreign_passport'`.
      #   * `expiration_date` is only allowed with `authorization_status: 'alien'`.
      # 
      # > ℹ️ Unneeded information is automatically removed during updates.
      # >
      # > If an update causes some formerly-required fields to be unneeded, the now-unneeded data will be removed automatically.
      # >
      # > **Example:** Updating `authorization_status` from `alien` to `citizen` will cause any data in `document_type`, `document_number`, `country`, and `expiration_date` to be removed, since these fields are unused for `authorization_status:'citizen'`.
      # 
      # Detailed instructions for completing Form I-9 can be found at https://www.uscis.gov/sites/default/files/document/forms/i-9instr.pdf
      # 
      # scope: `i9_authorizations:write`
      # 
      request = ::OpenApiSDK::Operations::PutV1EmployeesEmployeeIdI9AuthorizationRequest.new(
        
        employee_id: employee_id,
        request_body: request_body,
        x_gusto_api_version: x_gusto_api_version
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::PutV1EmployeesEmployeeIdI9AuthorizationRequest,
        base_url,
        '/v1/employees/{employee_id}/i9_authorization',
        request
      )
      headers = Utils.get_headers(request)
      req_content_type, data, form = Utils.serialize_request_body(request, :request_body, :json)
      headers['content-type'] = req_content_type
      raise StandardError, 'request body is required' if data.nil? && form.nil?
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.put(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::PutV1EmployeesEmployeeIdI9AuthorizationResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Shared::I9Authorization)
          res.i9_authorization = out
        end
      elsif r.status == 404
      elsif r.status == 422
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Shared::UnprocessableEntityErrorObject)
          res.unprocessable_entity_error_object = out
        end
      end

      res
    end


    sig { params(employee_id: ::String, x_gusto_api_version: T.nilable(::OpenApiSDK::Shared::VersionHeader)).returns(::OpenApiSDK::Operations::GetV1EmployeesEmployeeIdI9AuthorizationDocumentOptionsResponse) }
    def get_document_options(employee_id, x_gusto_api_version = nil)
      # get_document_options - Get an employee's I-9 verification document options
      # An employee's I-9 verification documents are the documents an employee has provided the employer to verify their identity and authorization to work in the United States. This endpoint returns the possible document options based on the employee's authorization status. These options can then be used to create the I-9 verification documents.
      # 
      # scope: `i9_authorizations:read`
      request = ::OpenApiSDK::Operations::GetV1EmployeesEmployeeIdI9AuthorizationDocumentOptionsRequest.new(
        
        employee_id: employee_id,
        x_gusto_api_version: x_gusto_api_version
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::GetV1EmployeesEmployeeIdI9AuthorizationDocumentOptionsRequest,
        base_url,
        '/v1/employees/{employee_id}/i9_authorization/document_options',
        request
      )
      headers = Utils.get_headers(request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::GetV1EmployeesEmployeeIdI9AuthorizationDocumentOptionsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, T::Array[::OpenApiSDK::Shared::I9AuthorizationDocumentOption])
          res.i9_authorization_document_options_object = out
        end
      elsif r.status == 404
      end

      res
    end


    sig { params(employee_id: ::String, x_gusto_api_version: T.nilable(::OpenApiSDK::Shared::VersionHeader)).returns(::OpenApiSDK::Operations::GetV1EmployeesEmployeeIdI9AuthorizationDocumentsResponse) }
    def get_documents(employee_id, x_gusto_api_version = nil)
      # get_documents - Get an employee's I-9 verification documents
      # An employee's I-9 verification documents are the documents an employee has provided the employer to verify their identity and authorization to work in the United States.
      # 
      # scope: `i9_authorizations:read`
      request = ::OpenApiSDK::Operations::GetV1EmployeesEmployeeIdI9AuthorizationDocumentsRequest.new(
        
        employee_id: employee_id,
        x_gusto_api_version: x_gusto_api_version
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::GetV1EmployeesEmployeeIdI9AuthorizationDocumentsRequest,
        base_url,
        '/v1/employees/{employee_id}/i9_authorization/documents',
        request
      )
      headers = Utils.get_headers(request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::GetV1EmployeesEmployeeIdI9AuthorizationDocumentsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, T::Array[::OpenApiSDK::Shared::I9AuthorizationDocument])
          res.i9_authorization_documents_object = out
        end
      elsif r.status == 404
      end

      res
    end


    sig { params(employee_id: ::String, request_body: ::OpenApiSDK::Operations::PutV1EmployeesEmployeeIdI9AuthorizationDocumentsRequestBody, x_gusto_api_version: T.nilable(::OpenApiSDK::Shared::VersionHeader)).returns(::OpenApiSDK::Operations::PutV1EmployeesEmployeeIdI9AuthorizationDocumentsResponse) }
    def create_documents(employee_id, request_body, x_gusto_api_version = nil)
      # create_documents - Create an employee's I-9 authorization verification documents
      # An employee's I-9 verification documents are the documents an employee has provided the employer to verify their identity and authorization to work in the United States.
      # 
      # Use the document options endpoint to get the possible document types and titles, which can vary depending on the employee's authorization status.
      # 
      # > 🚧 Every request must contain the complete list of documents for the Employee.
      # >
      # > Every request to this endpoint removes any previous verification document records for the employee.
      # 
      # scope: `i9_authorizations:manage`
      # 
      request = ::OpenApiSDK::Operations::PutV1EmployeesEmployeeIdI9AuthorizationDocumentsRequest.new(
        
        employee_id: employee_id,
        request_body: request_body,
        x_gusto_api_version: x_gusto_api_version
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::PutV1EmployeesEmployeeIdI9AuthorizationDocumentsRequest,
        base_url,
        '/v1/employees/{employee_id}/i9_authorization/documents',
        request
      )
      headers = Utils.get_headers(request)
      req_content_type, data, form = Utils.serialize_request_body(request, :request_body, :json)
      headers['content-type'] = req_content_type
      raise StandardError, 'request body is required' if data.nil? && form.nil?
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.put(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::PutV1EmployeesEmployeeIdI9AuthorizationDocumentsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, T::Array[::OpenApiSDK::Shared::I9AuthorizationDocument])
          res.i9_authorization_documents_object = out
        end
      elsif r.status == 404
      elsif r.status == 422
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Shared::UnprocessableEntityErrorObject)
          res.unprocessable_entity_error_object = out
        end
      end

      res
    end


    sig { params(employee_id: ::String, document_id: ::String, x_gusto_api_version: T.nilable(::OpenApiSDK::Shared::VersionHeader)).returns(::OpenApiSDK::Operations::DeleteV1EmployeesEmployeeIdI9AuthorizationDocumentsDocumentIdResponse) }
    def delete_document(employee_id, document_id, x_gusto_api_version = nil)
      # delete_document - Delete an employee's I-9 verification document
      # An employee's I-9 verification documents are the documents an employee has provided the employer to verify their identity and authorization to work in the United States. This endpoint deletes a specific verification document.
      # 
      # scope: `i9_authorizations:manage`
      request = ::OpenApiSDK::Operations::DeleteV1EmployeesEmployeeIdI9AuthorizationDocumentsDocumentIdRequest.new(
        
        employee_id: employee_id,
        document_id: document_id,
        x_gusto_api_version: x_gusto_api_version
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::DeleteV1EmployeesEmployeeIdI9AuthorizationDocumentsDocumentIdRequest,
        base_url,
        '/v1/employees/{employee_id}/i9_authorization/documents/{document_id}',
        request
      )
      headers = Utils.get_headers(request)
      headers['Accept'] = '*/*'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.delete(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::DeleteV1EmployeesEmployeeIdI9AuthorizationDocumentsDocumentIdResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 204
      elsif r.status == 404
      end

      res
    end


    sig { params(employee_id: ::String, request_body: ::OpenApiSDK::Operations::PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequestBody, x_gusto_api_version: T.nilable(::OpenApiSDK::Shared::VersionHeader)).returns(::OpenApiSDK::Operations::PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignResponse) }
    def employer_sign(employee_id, request_body, x_gusto_api_version = nil)
      # employer_sign - Employer sign an employee's Form I-9
      # Sign an employee's Form I-9 as an employer. Once the form is signed, the employee's I-9 authorization is considered complete and cannot be modified.
      # 
      # scope: `i9_authorizations:manage`
      request = ::OpenApiSDK::Operations::PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequest.new(
        
        employee_id: employee_id,
        request_body: request_body,
        x_gusto_api_version: x_gusto_api_version
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequest,
        base_url,
        '/v1/employees/{employee_id}/i9_authorization/employer_sign',
        request
      )
      headers = Utils.get_headers(request)
      req_content_type, data, form = Utils.serialize_request_body(request, :request_body, :json)
      headers['content-type'] = req_content_type
      raise StandardError, 'request body is required' if data.nil? && form.nil?
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.put(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Shared::I9Authorization)
          res.i9_authorization = out
        end
      elsif r.status == 404
      elsif r.status == 422
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Shared::UnprocessableEntityErrorObject)
          res.unprocessable_entity_error_object = out
        end
      end

      res
    end
  end
end
