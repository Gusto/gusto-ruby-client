# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'faraday'
require 'faraday/multipart'
require 'sorbet-runtime'

module OpenApiSDK
  extend T::Sig
  class Employees
    extend T::Sig


    sig { params(sdk_config: SDKConfiguration).void }
    def initialize(sdk_config)
      @sdk_configuration = sdk_config
    end


    sig { params(company_id: ::String, x_gusto_api_version: T.nilable(::OpenApiSDK::Shared::VersionHeader), request_body: T.nilable(::OpenApiSDK::Operations::PostV1EmployeesRequestBody)).returns(::OpenApiSDK::Operations::PostV1EmployeesResponse) }
    def create(company_id, x_gusto_api_version = nil, request_body = nil)
      # create - Create an employee
      # Create an employee.
      # 
      # scope: `employees:manage`
      request = ::OpenApiSDK::Operations::PostV1EmployeesRequest.new(
        
        company_id: company_id,
        x_gusto_api_version: x_gusto_api_version,
        request_body: request_body
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::PostV1EmployeesRequest,
        base_url,
        '/v1/companies/{company_id}/employees',
        request
      )
      headers = Utils.get_headers(request)
      req_content_type, data, form = Utils.serialize_request_body(request, :request_body, :json)
      headers['content-type'] = req_content_type
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.post(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::PostV1EmployeesResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 201
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Shared::Employee)
          res.employee = out
        end
      elsif r.status == 404
      elsif r.status == 422
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Shared::UnprocessableEntityErrorObject)
          res.unprocessable_entity_error_object = out
        end
      end

      res
    end


    sig { params(request: T.nilable(::OpenApiSDK::Operations::GetV1CompaniesCompanyIdEmployeesRequest)).returns(::OpenApiSDK::Operations::GetV1CompaniesCompanyIdEmployeesResponse) }
    def list(request)
      # list - Get employees of a company
      # Get all of the employees, onboarding, active and terminated, for a given company.
      # 
      # scope: `employees:read`
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::GetV1CompaniesCompanyIdEmployeesRequest,
        base_url,
        '/v1/companies/{company_id}/employees',
        request
      )
      headers = Utils.get_headers(request)
      query_params = Utils.get_query_params(::OpenApiSDK::Operations::GetV1CompaniesCompanyIdEmployeesRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::GetV1CompaniesCompanyIdEmployeesResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, T::Array[::OpenApiSDK::Shared::Employee])
          res.employee_list = out
        end
      elsif r.status == 404
      end

      res
    end


    sig { params(company_uuid: ::String, x_gusto_api_version: T.nilable(::OpenApiSDK::Shared::VersionHeader), historical_employee_body: T.nilable(::OpenApiSDK::Shared::HistoricalEmployeeBody)).returns(::OpenApiSDK::Operations::PostV1HistoricalEmployeesResponse) }
    def create_historical(company_uuid, x_gusto_api_version = nil, historical_employee_body = nil)
      # create_historical - Create a historical employee
      # Create a historical employee, an employee that was previously dismissed from the company in the current year.
      # 
      # scope: `employees:manage`
      request = ::OpenApiSDK::Operations::PostV1HistoricalEmployeesRequest.new(
        
        company_uuid: company_uuid,
        x_gusto_api_version: x_gusto_api_version,
        historical_employee_body: historical_employee_body
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::PostV1HistoricalEmployeesRequest,
        base_url,
        '/v1/companies/{company_uuid}/historical_employees',
        request
      )
      headers = Utils.get_headers(request)
      req_content_type, data, form = Utils.serialize_request_body(request, :historical_employee_body, :json)
      headers['content-type'] = req_content_type
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.post(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::PostV1HistoricalEmployeesResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 201
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Shared::Employee)
          res.employee = out
        end
      elsif r.status == 404
      elsif r.status == 422
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Shared::UnprocessableEntityErrorObject)
          res.unprocessable_entity_error_object = out
        end
      end

      res
    end


    sig { params(company_uuid: ::String, historical_employee_uuid: ::String, x_gusto_api_version: T.nilable(::OpenApiSDK::Shared::VersionHeader), request_body: T.nilable(::OpenApiSDK::Operations::PutV1HistoricalEmployeesRequestBody)).returns(::OpenApiSDK::Operations::PutV1HistoricalEmployeesResponse) }
    def update_historical(company_uuid, historical_employee_uuid, x_gusto_api_version = nil, request_body = nil)
      # update_historical - Update a historical employee
      # Update a historical employee, an employee that was previously dismissed from the company in the current year.
      # 
      # scope: `employees:manage`
      request = ::OpenApiSDK::Operations::PutV1HistoricalEmployeesRequest.new(
        
        company_uuid: company_uuid,
        historical_employee_uuid: historical_employee_uuid,
        x_gusto_api_version: x_gusto_api_version,
        request_body: request_body
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::PutV1HistoricalEmployeesRequest,
        base_url,
        '/v1/companies/{company_uuid}/historical_employees/{historical_employee_uuid}',
        request
      )
      headers = Utils.get_headers(request)
      req_content_type, data, form = Utils.serialize_request_body(request, :request_body, :json)
      headers['content-type'] = req_content_type
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.put(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::PutV1HistoricalEmployeesResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Shared::Employee)
          res.employee = out
        end
      elsif r.status == 404
      end

      res
    end


    sig { params(employee_id: ::String, include: T.nilable(T::Array[::OpenApiSDK::Operations::QueryParamInclude]), x_gusto_api_version: T.nilable(::OpenApiSDK::Shared::VersionHeader)).returns(::OpenApiSDK::Operations::GetV1EmployeesResponse) }
    def get(employee_id, include = nil, x_gusto_api_version = nil)
      # get - Get an employee
      # Get an employee.
      # 
      # scope: `employees:read`
      # 
      request = ::OpenApiSDK::Operations::GetV1EmployeesRequest.new(
        
        employee_id: employee_id,
        include: include,
        x_gusto_api_version: x_gusto_api_version
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::GetV1EmployeesRequest,
        base_url,
        '/v1/employees/{employee_id}',
        request
      )
      headers = Utils.get_headers(request)
      query_params = Utils.get_query_params(::OpenApiSDK::Operations::GetV1EmployeesRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::GetV1EmployeesResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Shared::Employee)
          res.employee = out
        end
      elsif r.status == 404
      end

      res
    end


    sig { params(employee_id: ::String, x_gusto_api_version: T.nilable(::OpenApiSDK::Shared::VersionHeader), request_body: T.nilable(::OpenApiSDK::Operations::PutV1EmployeesRequestBody)).returns(::OpenApiSDK::Operations::PutV1EmployeesResponse) }
    def update(employee_id, x_gusto_api_version = nil, request_body = nil)
      # update - Update an employee
      # Update an employee.
      # 
      # scope: `employees:write`
      request = ::OpenApiSDK::Operations::PutV1EmployeesRequest.new(
        
        employee_id: employee_id,
        x_gusto_api_version: x_gusto_api_version,
        request_body: request_body
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::PutV1EmployeesRequest,
        base_url,
        '/v1/employees/{employee_id}',
        request
      )
      headers = Utils.get_headers(request)
      req_content_type, data, form = Utils.serialize_request_body(request, :request_body, :json)
      headers['content-type'] = req_content_type
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.put(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::PutV1EmployeesResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Shared::Employee)
          res.employee = out
        end
      elsif r.status == 404
      elsif r.status == 422
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Shared::UnprocessableEntityErrorObject)
          res.unprocessable_entity_error_object = out
        end
      end

      res
    end


    sig { params(employee_id: ::String, x_gusto_api_version: T.nilable(::OpenApiSDK::Shared::VersionHeader)).returns(::OpenApiSDK::Operations::DeleteV1EmployeeResponse) }
    def delete(employee_id, x_gusto_api_version = nil)
      # delete - Delete an onboarding employee
      # Use this endpoint to delete an employee who is in onboarding. Deleting
      # an onboarded employee is not allowed and will return a 422 response. Please check out the Terminations api
      # if you need to terminate an onboarded employee.
      # 
      # scope: `employees:manage`
      request = ::OpenApiSDK::Operations::DeleteV1EmployeeRequest.new(
        
        employee_id: employee_id,
        x_gusto_api_version: x_gusto_api_version
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::DeleteV1EmployeeRequest,
        base_url,
        '/v1/employees/{employee_id}',
        request
      )
      headers = Utils.get_headers(request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.delete(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::DeleteV1EmployeeResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if [204, 404].include?(r.status)
      elsif r.status == 422
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Shared::UnprocessableEntityErrorObject)
          res.unprocessable_entity_error_object = out
        end
      end

      res
    end


    sig { params(employee_id: ::String, page: T.nilable(::Float), per: T.nilable(::Float), x_gusto_api_version: T.nilable(::OpenApiSDK::Shared::VersionHeader)).returns(::OpenApiSDK::Operations::GetV1EmployeesEmployeeIdCustomFieldsResponse) }
    def get_custom_fields(employee_id, page = nil, per = nil, x_gusto_api_version = nil)
      # get_custom_fields - Get an employee's custom fields
      # Returns a list of the employee's custom fields.
      # 
      # scope: `employees:read`
      request = ::OpenApiSDK::Operations::GetV1EmployeesEmployeeIdCustomFieldsRequest.new(
        
        employee_id: employee_id,
        page: page,
        per: per,
        x_gusto_api_version: x_gusto_api_version
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::GetV1EmployeesEmployeeIdCustomFieldsRequest,
        base_url,
        '/v1/employees/{employee_id}/custom_fields',
        request
      )
      headers = Utils.get_headers(request)
      query_params = Utils.get_query_params(::OpenApiSDK::Operations::GetV1EmployeesEmployeeIdCustomFieldsRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::GetV1EmployeesEmployeeIdCustomFieldsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Operations::GetV1EmployeesEmployeeIdCustomFieldsResponseBody)
          res.object = out
        end
      elsif r.status == 404
      end

      res
    end


    sig { params(employee_id: ::String, x_gusto_api_version: T.nilable(::OpenApiSDK::Shared::VersionHeader)).returns(::OpenApiSDK::Operations::GetV1EmployeesEmployeeIdOnboardingStatusResponse) }
    def get_onboarding_status(employee_id, x_gusto_api_version = nil)
      # get_onboarding_status - Get the employee's onboarding status
      # # Description
      # Retrieves an employee's onboarding status. The data returned helps inform the required onboarding steps and respective completion status.
      # 
      # scope: `employees:read`
      # 
      # ## onboarding_status
      # 
      # ### Admin-facilitated onboarding
      # | onboarding_status | Description |
      # |:------------------|------------:|
      # | `admin_onboarding_incomplete` | Admin needs to complete the full employee-onboarding. |
      # | `onboarding_completed` | Employee has been fully onboarded and verified. |
      # 
      # ### Employee self-onboarding
      # | onboarding_status | Description |
      # |:------------------|------------:|
      # | `admin_onboarding_incomplete` | Admin needs to enter basic information about the employee. |
      # | `self_onboarding_pending_invite` | Admin has the intention to invite the employee to self-onboard (e.g., marking a checkbox), but the system has not yet sent the invitation. |
      # | `self_onboarding_invited` | Employee has been sent an invitation to self-onboard. |
      # | `self_onboarding_invited_started` | Employee has started the self-onboarding process. |
      # | `self_onboarding_invited_overdue` | Employee's start date has passed, and employee has still not completed self-onboarding. |
      # | `self_onboarding_completed_by_employee` | Employee has completed entering in their information. The status should be updated via API to "self_onboarding_awaiting_admin_review" from here, once the Admin has started reviewing. |
      # | `self_onboarding_awaiting_admin_review` | Admin has started to verify the employee's information. |
      # | `onboarding_completed` | Employee has been fully onboarded and verified. |
      # 
      # ## onboarding_steps
      # 
      # | onboarding_steps | Requirement(s) to be completed |
      # |:-----------------|-------------------------------:|
      # | `personal_details` | Add employee's first name, last name, email, date of birth, social security number |
      # | `compensation_details` | Associate employee to a job & compensation. |
      # | `add_work_address` | Add employee work address. |
      # | `add_home_address` | Add employee home address. |
      # | `federal_tax_setup` | Set up federal tax withholdings. |
      # | `state_tax_setup` | Set up state tax withholdings. |
      # | `direct_deposit_setup` | (optional) Set up employee's direct deposit. |
      # | `employee_form_signing` | Employee forms (e.g., W4, direct deposit authorization) are generated & signed. |
      # | `file_new_hire_report` | File a new hire report for this employee. |
      # | `admin_review` | Admin reviews & confirms employee details (only required for Employee self-onboarding) |
      request = ::OpenApiSDK::Operations::GetV1EmployeesEmployeeIdOnboardingStatusRequest.new(
        
        employee_id: employee_id,
        x_gusto_api_version: x_gusto_api_version
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::GetV1EmployeesEmployeeIdOnboardingStatusRequest,
        base_url,
        '/v1/employees/{employee_id}/onboarding_status',
        request
      )
      headers = Utils.get_headers(request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::GetV1EmployeesEmployeeIdOnboardingStatusResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Shared::EmployeeOnboardingStatus)
          res.employee_onboarding_status = out
        end
      elsif r.status == 404
      end

      res
    end


    sig { params(employee_id: ::String, x_gusto_api_version: T.nilable(::OpenApiSDK::Shared::VersionHeader), request_body: T.nilable(::OpenApiSDK::Operations::PutV1EmployeesEmployeeIdOnboardingStatusRequestBody)).returns(::OpenApiSDK::Operations::PutV1EmployeesEmployeeIdOnboardingStatusResponse) }
    def update_onboarding_status(employee_id, x_gusto_api_version = nil, request_body = nil)
      # update_onboarding_status - Update the employee's onboarding status
      # scope: `employees:manage`
      # 
      # Updates an employee's onboarding status.
      # Below is a list of valid onboarding status changes depending on the intended action to be performed on behalf of the employee.
      # 
      # | Action | current onboarding_status | new onboarding_status |
      # |:------------------|:------------:|----------:|
      # | Mark an employee as self-onboarding | `admin_onboarding_incomplete` | `self_onboarding_pending_invite` |
      # | Invite an employee to self-onboard | `admin_onboarding_incomplete` or `self_onboarding_pending_invite` | `self_onboarding_invited` |
      # | Cancel an employee's self-onboarding | `self_onboarding_invited` or `self_onboarding_pending_invite` | `admin_onboarding_incomplete` |
      # | Review an employee's self-onboarded info | `self_onboarding_completed_by_employee` | `self_onboarding_awaiting_admin_review` |
      # | Finish an employee's onboarding | `admin_onboarding_incomplete` or `self_onboarding_awaiting_admin_review` | `onboarding_completed` |
      request = ::OpenApiSDK::Operations::PutV1EmployeesEmployeeIdOnboardingStatusRequest.new(
        
        employee_id: employee_id,
        x_gusto_api_version: x_gusto_api_version,
        request_body: request_body
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::PutV1EmployeesEmployeeIdOnboardingStatusRequest,
        base_url,
        '/v1/employees/{employee_id}/onboarding_status',
        request
      )
      headers = Utils.get_headers(request)
      req_content_type, data, form = Utils.serialize_request_body(request, :request_body, :json)
      headers['content-type'] = req_content_type
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.put(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::PutV1EmployeesEmployeeIdOnboardingStatusResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Shared::EmployeeOnboardingStatus)
          res.employee_onboarding_status = out
        end
      elsif r.status == 404
      elsif r.status == 422
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Shared::UnprocessableEntityErrorObject)
          res.unprocessable_entity_error_object = out
        end
      end

      res
    end


    sig { params(employee_uuid: ::String, time_off_type: ::String, x_gusto_api_version: T.nilable(::OpenApiSDK::Shared::VersionHeader)).returns(::OpenApiSDK::Operations::GetVersionEmployeesTimeOffActivitiesResponse) }
    def get_time_off_activities(employee_uuid, time_off_type, x_gusto_api_version = nil)
      # get_time_off_activities - Get employee time off activities
      # Get employee time off activities.
      # 
      # scope: `employee_time_off_activities:read`
      request = ::OpenApiSDK::Operations::GetVersionEmployeesTimeOffActivitiesRequest.new(
        
        employee_uuid: employee_uuid,
        time_off_type: time_off_type,
        x_gusto_api_version: x_gusto_api_version
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::GetVersionEmployeesTimeOffActivitiesRequest,
        base_url,
        '/v1/employees/{employee_uuid}/time_off_activities',
        request
      )
      headers = Utils.get_headers(request)
      query_params = Utils.get_query_params(::OpenApiSDK::Operations::GetVersionEmployeesTimeOffActivitiesRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::GetVersionEmployeesTimeOffActivitiesResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Shared::TimeOffActivity)
          res.time_off_activity = out
        end
      elsif r.status == 404
      end

      res
    end
  end
end
