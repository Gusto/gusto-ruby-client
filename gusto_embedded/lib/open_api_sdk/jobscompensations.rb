# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'faraday'
require 'faraday/multipart'
require 'sorbet-runtime'

module OpenApiSDK
  extend T::Sig
  class JobsCompensations
    extend T::Sig


    sig { params(sdk_config: SDKConfiguration).void }
    def initialize(sdk_config)
      @sdk_configuration = sdk_config
    end


    sig { params(job_id: ::String, x_gusto_api_version: T.nilable(::OpenApiSDK::Shared::VersionHeader)).returns(::OpenApiSDK::Operations::DeleteV1JobsJobIdResponse) }
    def delete_job(job_id, x_gusto_api_version = nil)
      # delete_job - Delete an individual job
      # Deletes a specific job that an employee holds.
      # 
      # scope: `jobs:write`
      request = ::OpenApiSDK::Operations::DeleteV1JobsJobIdRequest.new(
        
        job_id: job_id,
        x_gusto_api_version: x_gusto_api_version
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::DeleteV1JobsJobIdRequest,
        base_url,
        '/v1/jobs/{job_id}',
        request
      )
      headers = Utils.get_headers(request)
      headers['Accept'] = '*/*'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.delete(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::DeleteV1JobsJobIdResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )

      res
    end


    sig { params(compensation_id: ::String, x_gusto_api_version: T.nilable(::OpenApiSDK::Shared::VersionHeader)).returns(::OpenApiSDK::Operations::DeleteV1CompensationsCompensationIdResponse) }
    def delete_compensation(compensation_id, x_gusto_api_version = nil)
      # delete_compensation - Delete a compensation
      # Compensations contain information on how much is paid out for a job. Jobs may have many compensations, but only one that is active. The current compensation is the one with the most recent `effective_date`. This endpoint deletes a compensation for a job that hasn't been processed on payroll.
      # 
      # scope: `jobs:write`
      # 
      request = ::OpenApiSDK::Operations::DeleteV1CompensationsCompensationIdRequest.new(
        
        compensation_id: compensation_id,
        x_gusto_api_version: x_gusto_api_version
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::DeleteV1CompensationsCompensationIdRequest,
        base_url,
        '/v1/compensations/{compensation_id}',
        request
      )
      headers = Utils.get_headers(request)
      headers['Accept'] = '*/*'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.delete(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::DeleteV1CompensationsCompensationIdResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )

      res
    end
  end
end
