# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'faraday'
require 'faraday/multipart'
require 'sorbet-runtime'

module OpenApiSDK
  extend T::Sig
  class ExternalPayrolls
    extend T::Sig


    sig { params(sdk_config: SDKConfiguration).void }
    def initialize(sdk_config)
      @sdk_configuration = sdk_config
    end


    sig { params(company_uuid: ::String, request_body: ::OpenApiSDK::Operations::PostV1ExternalPayrollRequestBody, x_gusto_api_version: T.nilable(::OpenApiSDK::Shared::VersionHeader)).returns(::OpenApiSDK::Operations::PostV1ExternalPayrollResponse) }
    def create(company_uuid, request_body, x_gusto_api_version = nil)
      # create - Create a new external payroll for a company
      # Creates a new external payroll for the company.
      # 
      # scope: `external_payrolls:write`
      request = ::OpenApiSDK::Operations::PostV1ExternalPayrollRequest.new(
        
        company_uuid: company_uuid,
        request_body: request_body,
        x_gusto_api_version: x_gusto_api_version
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::PostV1ExternalPayrollRequest,
        base_url,
        '/v1/companies/{company_uuid}/external_payrolls',
        request
      )
      headers = Utils.get_headers(request)
      req_content_type, data, form = Utils.serialize_request_body(request, :request_body, :json)
      headers['content-type'] = req_content_type
      raise StandardError, 'request body is required' if data.nil? && form.nil?
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.post(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::PostV1ExternalPayrollResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Shared::ExternalPayroll)
          res.external_payroll = out
        end
      elsif r.status == 404
      elsif r.status == 422
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Shared::UnprocessableEntityErrorObject)
          res.unprocessable_entity_error_object = out
        end
      end

      res
    end


    sig { params(company_uuid: ::String, x_gusto_api_version: T.nilable(::OpenApiSDK::Shared::VersionHeader)).returns(::OpenApiSDK::Operations::GetV1CompanyExternalPayrollsResponse) }
    def get(company_uuid, x_gusto_api_version = nil)
      # get - Get external payrolls for a company
      # Get an external payroll for a given company.
      # 
      # scope: `external_payrolls:read`
      request = ::OpenApiSDK::Operations::GetV1CompanyExternalPayrollsRequest.new(
        
        company_uuid: company_uuid,
        x_gusto_api_version: x_gusto_api_version
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::GetV1CompanyExternalPayrollsRequest,
        base_url,
        '/v1/companies/{company_uuid}/external_payrolls',
        request
      )
      headers = Utils.get_headers(request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::GetV1CompanyExternalPayrollsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, T::Array[::OpenApiSDK::Shared::ExternalPayrollBasic])
          res.external_payroll_list = out
        end
      elsif r.status == 404
      end

      res
    end


    sig { params(company_uuid: ::String, external_payroll_id: ::String, x_gusto_api_version: T.nilable(::OpenApiSDK::Shared::VersionHeader)).returns(::OpenApiSDK::Operations::GetV1ExternalPayrollResponse) }
    def retrieve(company_uuid, external_payroll_id, x_gusto_api_version = nil)
      # retrieve - Get an external payroll
      # Get an external payroll for a given company.
      # 
      # scope: `external_payrolls:read`
      request = ::OpenApiSDK::Operations::GetV1ExternalPayrollRequest.new(
        
        company_uuid: company_uuid,
        external_payroll_id: external_payroll_id,
        x_gusto_api_version: x_gusto_api_version
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::GetV1ExternalPayrollRequest,
        base_url,
        '/v1/companies/{company_uuid}/external_payrolls/{external_payroll_id}',
        request
      )
      headers = Utils.get_headers(request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::GetV1ExternalPayrollResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Shared::ExternalPayroll)
          res.external_payroll = out
        end
      elsif r.status == 404
      end

      res
    end


    sig { params(company_uuid: ::String, external_payroll_id: ::String, x_gusto_api_version: T.nilable(::OpenApiSDK::Shared::VersionHeader)).returns(::OpenApiSDK::Operations::DeleteV1ExternalPayrollResponse) }
    def delete(company_uuid, external_payroll_id, x_gusto_api_version = nil)
      # delete - Delete an external payroll
      # Delete an external payroll.
      # 
      # scope: `external_payrolls:write`
      request = ::OpenApiSDK::Operations::DeleteV1ExternalPayrollRequest.new(
        
        company_uuid: company_uuid,
        external_payroll_id: external_payroll_id,
        x_gusto_api_version: x_gusto_api_version
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::DeleteV1ExternalPayrollRequest,
        base_url,
        '/v1/companies/{company_uuid}/external_payrolls/{external_payroll_id}',
        request
      )
      headers = Utils.get_headers(request)
      headers['Accept'] = '*/*'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.delete(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::DeleteV1ExternalPayrollResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 204
      elsif r.status == 404
      end

      res
    end


    sig { params(company_uuid: ::String, external_payroll_id: ::String, request_body: ::OpenApiSDK::Operations::PutV1ExternalPayrollRequestBody, x_gusto_api_version: T.nilable(::OpenApiSDK::Shared::VersionHeader)).returns(::OpenApiSDK::Operations::PutV1ExternalPayrollResponse) }
    def update(company_uuid, external_payroll_id, request_body, x_gusto_api_version = nil)
      # update - Update an external payroll
      # Update an external payroll with a list of external payroll items
      # 
      # scope: `external_payrolls:write`
      request = ::OpenApiSDK::Operations::PutV1ExternalPayrollRequest.new(
        
        company_uuid: company_uuid,
        external_payroll_id: external_payroll_id,
        request_body: request_body,
        x_gusto_api_version: x_gusto_api_version
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::PutV1ExternalPayrollRequest,
        base_url,
        '/v1/companies/{company_uuid}/external_payrolls/{external_payroll_id}',
        request
      )
      headers = Utils.get_headers(request)
      req_content_type, data, form = Utils.serialize_request_body(request, :request_body, :json)
      headers['content-type'] = req_content_type
      raise StandardError, 'request body is required' if data.nil? && form.nil?
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.put(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::PutV1ExternalPayrollResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Shared::ExternalPayroll)
          res.external_payroll = out
        end
      elsif r.status == 404
      elsif r.status == 422
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Shared::UnprocessableEntityErrorObject)
          res.unprocessable_entity_error_object = out
        end
      end

      res
    end


    sig { params(company_uuid: ::String, external_payroll_id: ::String, x_gusto_api_version: T.nilable(::OpenApiSDK::Shared::VersionHeader)).returns(::OpenApiSDK::Operations::GetV1ExternalPayrollCalculateTaxesResponse) }
    def calculate_taxes(company_uuid, external_payroll_id, x_gusto_api_version = nil)
      # calculate_taxes - Get tax suggestions for an external payroll
      # Get tax suggestions for an external payroll. Earnings and/or benefits
      # data must be saved prior to the calculation in order to retrieve accurate
      # tax calculation.
      # 
      # scope: `external_payrolls:read`
      request = ::OpenApiSDK::Operations::GetV1ExternalPayrollCalculateTaxesRequest.new(
        
        company_uuid: company_uuid,
        external_payroll_id: external_payroll_id,
        x_gusto_api_version: x_gusto_api_version
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::GetV1ExternalPayrollCalculateTaxesRequest,
        base_url,
        '/v1/companies/{company_uuid}/external_payrolls/{external_payroll_id}/calculate_taxes',
        request
      )
      headers = Utils.get_headers(request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::GetV1ExternalPayrollCalculateTaxesResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, T::Array[::OpenApiSDK::Shared::ExternalPayrollTaxSuggestions])
          res.external_payroll_tax_suggestions_list = out
        end
      elsif r.status == 404
      end

      res
    end


    sig { params(company_uuid: ::String, x_gusto_api_version: T.nilable(::OpenApiSDK::Shared::VersionHeader)).returns(::OpenApiSDK::Operations::GetV1TaxLiabilitiesResponse) }
    def list_tax_liabilities(company_uuid, x_gusto_api_version = nil)
      # list_tax_liabilities - Get tax liabilities
      # Get tax liabilities from aggregate external payrolls for a company.
      # 
      # scope: `external_payrolls:read`
      request = ::OpenApiSDK::Operations::GetV1TaxLiabilitiesRequest.new(
        
        company_uuid: company_uuid,
        x_gusto_api_version: x_gusto_api_version
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::GetV1TaxLiabilitiesRequest,
        base_url,
        '/v1/companies/{company_uuid}/external_payrolls/tax_liabilities',
        request
      )
      headers = Utils.get_headers(request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::GetV1TaxLiabilitiesResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, T::Array[T::Array[::OpenApiSDK::Shared::TaxLiabilitiesSelections]])
          res.tax_liabilities_list = out
        end
      elsif r.status == 404
      end

      res
    end


    sig { params(company_uuid: ::String, request_body: ::OpenApiSDK::Operations::PutV1TaxLiabilitiesRequestBody, x_gusto_api_version: T.nilable(::OpenApiSDK::Shared::VersionHeader)).returns(::OpenApiSDK::Operations::PutV1TaxLiabilitiesResponse) }
    def update_tax_liabilities(company_uuid, request_body, x_gusto_api_version = nil)
      # update_tax_liabilities - Update tax liabilities
      # Update tax liabilities for a company.
      # 
      # scope: `external_payrolls:write`
      request = ::OpenApiSDK::Operations::PutV1TaxLiabilitiesRequest.new(
        
        company_uuid: company_uuid,
        request_body: request_body,
        x_gusto_api_version: x_gusto_api_version
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::PutV1TaxLiabilitiesRequest,
        base_url,
        '/v1/companies/{company_uuid}/external_payrolls/tax_liabilities',
        request
      )
      headers = Utils.get_headers(request)
      req_content_type, data, form = Utils.serialize_request_body(request, :request_body, :json)
      headers['content-type'] = req_content_type
      raise StandardError, 'request body is required' if data.nil? && form.nil?
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.put(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::PutV1TaxLiabilitiesResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, T::Array[T::Array[::OpenApiSDK::Shared::TaxLiabilitiesSelections]])
          res.tax_liabilities_list = out
        end
      elsif r.status == 404
      elsif r.status == 422
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Shared::UnprocessableEntityErrorObject)
          res.unprocessable_entity_error_object = out
        end
      end

      res
    end


    sig { params(company_uuid: ::String, x_gusto_api_version: T.nilable(::OpenApiSDK::Shared::VersionHeader)).returns(::OpenApiSDK::Operations::PutV1TaxLiabilitiesFinishResponse) }
    def finalize_tax_liabilities(company_uuid, x_gusto_api_version = nil)
      # finalize_tax_liabilities - Finalize tax liabilities options and convert into processed payrolls
      # Finalizes tax liabilities for a company. All external payrolls edit action will be disabled.
      # 
      # scope: `external_payrolls:write`
      request = ::OpenApiSDK::Operations::PutV1TaxLiabilitiesFinishRequest.new(
        
        company_uuid: company_uuid,
        x_gusto_api_version: x_gusto_api_version
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::PutV1TaxLiabilitiesFinishRequest,
        base_url,
        '/v1/companies/{company_uuid}/external_payrolls/tax_liabilities/finish',
        request
      )
      headers = Utils.get_headers(request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.put(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::PutV1TaxLiabilitiesFinishResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 202
      elsif r.status == 404
      elsif r.status == 422
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Shared::UnprocessableEntityErrorObject)
          res.unprocessable_entity_error_object = out
        end
      end

      res
    end
  end
end
