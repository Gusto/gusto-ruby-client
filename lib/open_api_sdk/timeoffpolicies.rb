# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'faraday'
require 'faraday/multipart'
require 'sorbet-runtime'

module OpenApiSDK
  extend T::Sig
  class TimeOffPolicies
    extend T::Sig


    sig { params(sdk_config: SDKConfiguration).void }
    def initialize(sdk_config)
      @sdk_configuration = sdk_config
    end


    sig { params(payroll_id: ::String, employee_id: ::String, x_gusto_api_version: T.nilable(::OpenApiSDK::Shared::VersionHeader), request_body: T.nilable(::OpenApiSDK::Operations::PostV1PayrollsPayrollIdCalculateAccruingTimeOffHoursRequestBody)).returns(::OpenApiSDK::Operations::PostV1PayrollsPayrollIdCalculateAccruingTimeOffHoursResponse) }
    def calculate_accruing_hours(payroll_id, employee_id, x_gusto_api_version = nil, request_body = nil)
      # calculate_accruing_hours - Calculate accruing time off hours
      # Returns a list of accruing time off for each time off policy associated with the employee.
      # 
      # Factors affecting the accrued hours:
      #   * the time off policy accrual method (whether they get pay per hour worked, per hour paid, with / without overtime, accumulate time off based on pay period / calendar year / anniversary)
      #   * how many hours of work during this pay period
      #   * how many hours of PTO / sick hours taken during this pay period (for per hour paid policies only)
      #   * company pay schedule frequency (for per pay period)
      # 
      # If none of the parameters is passed in, the accrued time off hour will be 0.
      # 
      # scope: `payrolls:read`
      request = ::OpenApiSDK::Operations::PostV1PayrollsPayrollIdCalculateAccruingTimeOffHoursRequest.new(
        
        payroll_id: payroll_id,
        employee_id: employee_id,
        x_gusto_api_version: x_gusto_api_version,
        request_body: request_body
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::PostV1PayrollsPayrollIdCalculateAccruingTimeOffHoursRequest,
        base_url,
        '/v1/payrolls/{payroll_id}/employees/{employee_id}/calculate_accruing_time_off_hours',
        request
      )
      headers = Utils.get_headers(request)
      req_content_type, data, form = Utils.serialize_request_body(request, :request_body, :json)
      headers['content-type'] = req_content_type
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.post(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::PostV1PayrollsPayrollIdCalculateAccruingTimeOffHoursResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, T::Array[::OpenApiSDK::Shared::AccruingTimeOffHour])
          res.accruing_time_off_hour_object = out
        end
      elsif r.status == 422
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Shared::UnprocessableEntityErrorObject)
          res.unprocessable_entity_error_object = out
        end
      end

      res
    end


    sig { params(time_off_policy_uuid: ::String, x_gusto_api_version: T.nilable(::OpenApiSDK::Shared::VersionHeader)).returns(::OpenApiSDK::Operations::GetTimeOffPoliciesTimeOffPolicyUuidResponse) }
    def get(time_off_policy_uuid, x_gusto_api_version = nil)
      # get - Get a time off policy
      # Get a time off policy
      # 
      # scope: `time_off_policies:read`
      request = ::OpenApiSDK::Operations::GetTimeOffPoliciesTimeOffPolicyUuidRequest.new(
        
        time_off_policy_uuid: time_off_policy_uuid,
        x_gusto_api_version: x_gusto_api_version
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::GetTimeOffPoliciesTimeOffPolicyUuidRequest,
        base_url,
        '/v1/time_off_policies/{time_off_policy_uuid}',
        request
      )
      headers = Utils.get_headers(request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::GetTimeOffPoliciesTimeOffPolicyUuidResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Shared::TimeOffPolicy)
          res.time_off_policy = out
        end
      elsif r.status == 404
      end

      res
    end


    sig { params(time_off_policy_uuid: ::String, x_gusto_api_version: T.nilable(::OpenApiSDK::Shared::VersionHeader), request_body: T.nilable(::OpenApiSDK::Operations::PutTimeOffPoliciesTimeOffPolicyUuidRequestBody)).returns(::OpenApiSDK::Operations::PutTimeOffPoliciesTimeOffPolicyUuidResponse) }
    def update(time_off_policy_uuid, x_gusto_api_version = nil, request_body = nil)
      # update - Update a time off policy
      # Update a time off policy
      # 
      # scope: `time_off_policies:write`
      request = ::OpenApiSDK::Operations::PutTimeOffPoliciesTimeOffPolicyUuidRequest.new(
        
        time_off_policy_uuid: time_off_policy_uuid,
        x_gusto_api_version: x_gusto_api_version,
        request_body: request_body
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::PutTimeOffPoliciesTimeOffPolicyUuidRequest,
        base_url,
        '/v1/time_off_policies/{time_off_policy_uuid}',
        request
      )
      headers = Utils.get_headers(request)
      req_content_type, data, form = Utils.serialize_request_body(request, :request_body, :json)
      headers['content-type'] = req_content_type
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.put(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::PutTimeOffPoliciesTimeOffPolicyUuidResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Shared::TimeOffPolicy)
          res.time_off_policy = out
        end
      elsif r.status == 404
      elsif r.status == 422
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Shared::UnprocessableEntityErrorObject)
          res.unprocessable_entity_error_object = out
        end
      end

      res
    end


    sig { params(company_uuid: ::String, x_gusto_api_version: T.nilable(::OpenApiSDK::Shared::VersionHeader)).returns(::OpenApiSDK::Operations::GetCompaniesCompanyUuidTimeOffPoliciesResponse) }
    def get_all(company_uuid, x_gusto_api_version = nil)
      # get_all - Get all time off policies
      # Get all time off policies for a company
      # 
      # scope: `time_off_policies:read`
      request = ::OpenApiSDK::Operations::GetCompaniesCompanyUuidTimeOffPoliciesRequest.new(
        
        company_uuid: company_uuid,
        x_gusto_api_version: x_gusto_api_version
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::GetCompaniesCompanyUuidTimeOffPoliciesRequest,
        base_url,
        '/v1/companies/{company_uuid}/time_off_policies',
        request
      )
      headers = Utils.get_headers(request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::GetCompaniesCompanyUuidTimeOffPoliciesResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, T::Array[::OpenApiSDK::Shared::TimeOffPolicy])
          res.time_off_policy_list = out
        end
      elsif r.status == 404
      end

      res
    end


    sig { params(company_uuid: ::String, x_gusto_api_version: T.nilable(::OpenApiSDK::Shared::VersionHeader), request_body: T.nilable(::OpenApiSDK::Operations::PostCompaniesCompanyUuidTimeOffPoliciesRequestBody)).returns(::OpenApiSDK::Operations::PostCompaniesCompanyUuidTimeOffPoliciesResponse) }
    def create(company_uuid, x_gusto_api_version = nil, request_body = nil)
      # create - Create a time off policy
      # Create a time off policy
      # 
      # scope: `time_off_policies:write`
      request = ::OpenApiSDK::Operations::PostCompaniesCompanyUuidTimeOffPoliciesRequest.new(
        
        company_uuid: company_uuid,
        x_gusto_api_version: x_gusto_api_version,
        request_body: request_body
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::PostCompaniesCompanyUuidTimeOffPoliciesRequest,
        base_url,
        '/v1/companies/{company_uuid}/time_off_policies',
        request
      )
      headers = Utils.get_headers(request)
      req_content_type, data, form = Utils.serialize_request_body(request, :request_body, :json)
      headers['content-type'] = req_content_type
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.post(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::PostCompaniesCompanyUuidTimeOffPoliciesResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 201
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Shared::TimeOffPolicy)
          res.time_off_policy = out
        end
      elsif r.status == 404
      elsif r.status == 422
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Shared::UnprocessableEntityErrorObject)
          res.unprocessable_entity_error_object = out
        end
      end

      res
    end


    sig { params(time_off_policy_uuid: ::String, x_gusto_api_version: T.nilable(::OpenApiSDK::Shared::VersionHeader), request_body: T.nilable(::OpenApiSDK::Operations::PutVersionTimeOffPoliciesTimeOffPolicyUuidAddEmployeesRequestBody)).returns(::OpenApiSDK::Operations::PutVersionTimeOffPoliciesTimeOffPolicyUuidAddEmployeesResponse) }
    def add_employees(time_off_policy_uuid, x_gusto_api_version = nil, request_body = nil)
      # add_employees - Add employees to a time off policy
      # Add employees to a time off policy. Employees are required to have at least one job to be added to a time off policy. Accepts starting balances for non-unlimited policies
      # 
      # scope: `time_off_policies:write`
      request = ::OpenApiSDK::Operations::PutVersionTimeOffPoliciesTimeOffPolicyUuidAddEmployeesRequest.new(
        
        time_off_policy_uuid: time_off_policy_uuid,
        x_gusto_api_version: x_gusto_api_version,
        request_body: request_body
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::PutVersionTimeOffPoliciesTimeOffPolicyUuidAddEmployeesRequest,
        base_url,
        '/v1/time_off_policies/{time_off_policy_uuid}/add_employees',
        request
      )
      headers = Utils.get_headers(request)
      req_content_type, data, form = Utils.serialize_request_body(request, :request_body, :json)
      headers['content-type'] = req_content_type
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.put(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::PutVersionTimeOffPoliciesTimeOffPolicyUuidAddEmployeesResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Shared::TimeOffPolicy)
          res.time_off_policy = out
        end
      elsif r.status == 404
      elsif r.status == 422
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Shared::UnprocessableEntityErrorObject)
          res.unprocessable_entity_error_object = out
        end
      end

      res
    end


    sig { params(time_off_policy_uuid: ::String, x_gusto_api_version: T.nilable(::OpenApiSDK::Shared::VersionHeader), request_body: T.nilable(::OpenApiSDK::Operations::PutV1TimeOffPoliciesTimeOffPolicyUuidRemoveEmployeesRequestBody)).returns(::OpenApiSDK::Operations::PutV1TimeOffPoliciesTimeOffPolicyUuidRemoveEmployeesResponse) }
    def remove_employees(time_off_policy_uuid, x_gusto_api_version = nil, request_body = nil)
      # remove_employees - Remove employees from a time off policy
      # Remove employees from a time off policy
      # 
      # scope: `time_off_policies:write`
      request = ::OpenApiSDK::Operations::PutV1TimeOffPoliciesTimeOffPolicyUuidRemoveEmployeesRequest.new(
        
        time_off_policy_uuid: time_off_policy_uuid,
        x_gusto_api_version: x_gusto_api_version,
        request_body: request_body
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::PutV1TimeOffPoliciesTimeOffPolicyUuidRemoveEmployeesRequest,
        base_url,
        '/v1/time_off_policies/{time_off_policy_uuid}/remove_employees',
        request
      )
      headers = Utils.get_headers(request)
      req_content_type, data, form = Utils.serialize_request_body(request, :request_body, :json)
      headers['content-type'] = req_content_type
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.put(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::PutV1TimeOffPoliciesTimeOffPolicyUuidRemoveEmployeesResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Shared::TimeOffPolicy)
          res.time_off_policy = out
        end
      elsif r.status == 404
      elsif r.status == 422
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Shared::UnprocessableEntityErrorObject)
          res.unprocessable_entity_error_object = out
        end
      end

      res
    end


    sig { params(time_off_policy_uuid: ::String, x_gusto_api_version: T.nilable(::OpenApiSDK::Shared::VersionHeader), request_body: T.nilable(::OpenApiSDK::Operations::PutVersionTimeOffPoliciesTimeOffPolicyUuidBalanceRequestBody)).returns(::OpenApiSDK::Operations::PutVersionTimeOffPoliciesTimeOffPolicyUuidBalanceResponse) }
    def update_balance(time_off_policy_uuid, x_gusto_api_version = nil, request_body = nil)
      # update_balance - Update employee time off hour balances
      # Updates time off hours balances for employees for a time off policy
      # 
      # scope: `time_off_policies:write`
      request = ::OpenApiSDK::Operations::PutVersionTimeOffPoliciesTimeOffPolicyUuidBalanceRequest.new(
        
        time_off_policy_uuid: time_off_policy_uuid,
        x_gusto_api_version: x_gusto_api_version,
        request_body: request_body
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::PutVersionTimeOffPoliciesTimeOffPolicyUuidBalanceRequest,
        base_url,
        '/v1/time_off_policies/{time_off_policy_uuid}/balance',
        request
      )
      headers = Utils.get_headers(request)
      req_content_type, data, form = Utils.serialize_request_body(request, :request_body, :json)
      headers['content-type'] = req_content_type
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.put(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::PutVersionTimeOffPoliciesTimeOffPolicyUuidBalanceResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Shared::TimeOffPolicy)
          res.time_off_policy = out
        end
      elsif r.status == 404
      elsif r.status == 422
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Shared::UnprocessableEntityErrorObject)
          res.unprocessable_entity_error_object = out
        end
      end

      res
    end


    sig { params(time_off_policy_uuid: ::String, x_gusto_api_version: T.nilable(::OpenApiSDK::Shared::VersionHeader)).returns(::OpenApiSDK::Operations::PutV1TimeOffPoliciesTimeOffPolicyUuidDeactivateResponse) }
    def deactivate(time_off_policy_uuid, x_gusto_api_version = nil)
      # deactivate - Deactivate a time off policy
      # Deactivate a time off policy
      # 
      # scope: `time_off_policies:write`
      request = ::OpenApiSDK::Operations::PutV1TimeOffPoliciesTimeOffPolicyUuidDeactivateRequest.new(
        
        time_off_policy_uuid: time_off_policy_uuid,
        x_gusto_api_version: x_gusto_api_version
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::OpenApiSDK::Operations::PutV1TimeOffPoliciesTimeOffPolicyUuidDeactivateRequest,
        base_url,
        '/v1/time_off_policies/{time_off_policy_uuid}/deactivate',
        request
      )
      headers = Utils.get_headers(request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.put(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::OpenApiSDK::Operations::PutV1TimeOffPoliciesTimeOffPolicyUuidDeactivateResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Shared::TimeOffPolicy)
          res.time_off_policy = out
        end
      elsif r.status == 404
      elsif r.status == 422
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::OpenApiSDK::Shared::UnprocessableEntityErrorObject)
          res.unprocessable_entity_error_object = out
        end
      end

      res
    end
  end
end
