# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module OpenApiSDK
  module Operations
  

    class PostV1CompaniesCompanyIdPayrollsRequestBody < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig

      # Pay period end date.
      field :end_date, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('end_date') } }
      # Whether it is an off cycle payroll.
      field :off_cycle, T::Boolean, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('off_cycle') } }
      # An off cycle payroll reason. Select one from the following list.
      field :off_cycle_reason, ::OpenApiSDK::Operations::OffCycleReason, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('off_cycle_reason'), 'decoder': Utils.enum_from_string(::OpenApiSDK::Operations::OffCycleReason, false) } }
      # Pay period start date.
      field :start_date, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('start_date') } }
      # Payment date.
      field :check_date, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('check_date') } }
      # A list of employee uuids to include on the payroll.
      field :employee_uuids, T.nilable(T::Array[::String]), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('employee_uuids') } }
      # Enable taxes to be withheld at the IRS's required rate of 22% for federal income taxes. State income taxes will be taxed at the state's supplemental tax rate. Otherwise, we'll sum the entirety of the employee's wages and withhold taxes on the entire amount at the rate for regular wages.
      field :fixed_withholding_rate, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('fixed_withholding_rate') } }
      # A pay schedule is required for transition from old pay schedule payroll to identify the matching transition pay period.
      field :pay_schedule_uuid, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('pay_schedule_uuid') } }
      # Block regular deductions and contributions for this payroll.
      field :skip_regular_deductions, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('skip_regular_deductions') } }
      # The payment schedule tax rate the payroll is based on.
      field :withholding_pay_period, T.nilable(::OpenApiSDK::Operations::WithholdingPayPeriod), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('withholding_pay_period'), 'decoder': Utils.enum_from_string(::OpenApiSDK::Operations::WithholdingPayPeriod, true) } }


      sig { params(end_date: ::String, off_cycle: T::Boolean, off_cycle_reason: ::OpenApiSDK::Operations::OffCycleReason, start_date: ::String, check_date: T.nilable(::String), employee_uuids: T.nilable(T::Array[::String]), fixed_withholding_rate: T.nilable(T::Boolean), pay_schedule_uuid: T.nilable(::String), skip_regular_deductions: T.nilable(T::Boolean), withholding_pay_period: T.nilable(::OpenApiSDK::Operations::WithholdingPayPeriod)).void }
      def initialize(end_date: nil, off_cycle: nil, off_cycle_reason: nil, start_date: nil, check_date: nil, employee_uuids: nil, fixed_withholding_rate: nil, pay_schedule_uuid: nil, skip_regular_deductions: nil, withholding_pay_period: nil)
        @end_date = end_date
        @off_cycle = off_cycle
        @off_cycle_reason = off_cycle_reason
        @start_date = start_date
        @check_date = check_date
        @employee_uuids = employee_uuids
        @fixed_withholding_rate = fixed_withholding_rate
        @pay_schedule_uuid = pay_schedule_uuid
        @skip_regular_deductions = skip_regular_deductions
        @withholding_pay_period = withholding_pay_period
      end
    end
  end
end
