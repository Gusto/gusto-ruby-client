# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module OpenApiSDK
  module Operations
  

    class PutV1EmployeeBenefitsEmployeeBenefitIdRequestBody < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig

      # The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field.
      field :version, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('version') } }
      # Whether the employee benefit is active.
      field :active, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('active') } }
      # Whether the employee should use a benefit’s "catch up" rate. Only Roth 401k and 401k benefits use this value for employees over 50.
      field :catch_up, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('catch_up') } }
      # The amount to be paid, per pay period, by the company.
      # 
      # @deprecated  true: This will be removed in a future release, please migrate away from it as soon as possible.
      field :company_contribution, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('company_contribution') } }
      # The maximum company contribution amount per year. A null value signifies no limit.
      field :company_contribution_annual_maximum, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('company_contribution_annual_maximum') } }
      # Whether the company contribution amount should be treated as a percentage to be deducted from each payroll.
      # 
      # @deprecated  true: This will be removed in a future release, please migrate away from it as soon as possible.
      field :contribute_as_percentage, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('contribute_as_percentage') } }
      # An object representing the type and value of the company contribution.
      field :contribution, T.nilable(::OpenApiSDK::Operations::PutV1EmployeeBenefitsEmployeeBenefitIdContribution), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('contribution') } }
      # The amount that the employee is insured for. Note: company contribution cannot be present if coverage amount is set.
      field :coverage_amount, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('coverage_amount') } }
      # The coverage amount as a multiple of the employee’s salary. Only applicable for Group Term Life benefits. Note: cannot be set if coverage amount is also set.
      field :coverage_salary_multiplier, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('coverage_salary_multiplier') } }
      # Whether the employee deduction amount should be treated as a percentage to be deducted from each payroll.
      field :deduct_as_percentage, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('deduct_as_percentage') } }
      # Whether the employee deduction reduces taxable income or not. Only valid for Group Term Life benefits. Note: when the value is not "unset", coverage amount and coverage salary multiplier are ignored.
      field :deduction_reduces_taxable_income, T.nilable(::OpenApiSDK::Operations::PutV1EmployeeBenefitsEmployeeBenefitIdDeductionReducesTaxableIncome), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('deduction_reduces_taxable_income'), 'decoder': Utils.enum_from_string(::OpenApiSDK::Operations::PutV1EmployeeBenefitsEmployeeBenefitIdDeductionReducesTaxableIncome, true) } }
      # Whether the company contribution is elective (aka "matching"). For `tiered`, `elective_amount`, and `elective_percentage` contribution types this is ignored and assumed to be `true`.
      field :elective, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('elective') } }
      # The amount to be deducted, per pay period, from the employee's pay.
      field :employee_deduction, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('employee_deduction') } }
      # The maximum employee deduction amount per year. A null value signifies no limit.
      field :employee_deduction_annual_maximum, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('employee_deduction_annual_maximum') } }
      # Some benefits require additional information to determine
      # their limit.
      # 
      # `Family` or `Individual`: Applicable to HSA benefit.
      # 
      # `Joint Filing or Single` or `Married and Filing Separately`: Applicable to Dependent Care FSA benefit.
      field :limit_option, T.nilable(::OpenApiSDK::Operations::PutV1EmployeeBenefitsEmployeeBenefitIdLimitOption), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('limit_option'), 'decoder': Utils.enum_from_string(::OpenApiSDK::Operations::PutV1EmployeeBenefitsEmployeeBenefitIdLimitOption, true) } }


      sig { params(version: ::String, active: T.nilable(T::Boolean), catch_up: T.nilable(T::Boolean), company_contribution: T.nilable(::String), company_contribution_annual_maximum: T.nilable(::String), contribute_as_percentage: T.nilable(T::Boolean), contribution: T.nilable(::OpenApiSDK::Operations::PutV1EmployeeBenefitsEmployeeBenefitIdContribution), coverage_amount: T.nilable(::String), coverage_salary_multiplier: T.nilable(::String), deduct_as_percentage: T.nilable(T::Boolean), deduction_reduces_taxable_income: T.nilable(::OpenApiSDK::Operations::PutV1EmployeeBenefitsEmployeeBenefitIdDeductionReducesTaxableIncome), elective: T.nilable(T::Boolean), employee_deduction: T.nilable(::String), employee_deduction_annual_maximum: T.nilable(::String), limit_option: T.nilable(::OpenApiSDK::Operations::PutV1EmployeeBenefitsEmployeeBenefitIdLimitOption)).void }
      def initialize(version: nil, active: nil, catch_up: nil, company_contribution: nil, company_contribution_annual_maximum: nil, contribute_as_percentage: nil, contribution: nil, coverage_amount: nil, coverage_salary_multiplier: nil, deduct_as_percentage: nil, deduction_reduces_taxable_income: nil, elective: nil, employee_deduction: nil, employee_deduction_annual_maximum: nil, limit_option: nil)
        @version = version
        @active = active
        @catch_up = catch_up
        @company_contribution = company_contribution
        @company_contribution_annual_maximum = company_contribution_annual_maximum
        @contribute_as_percentage = contribute_as_percentage
        @contribution = contribution
        @coverage_amount = coverage_amount
        @coverage_salary_multiplier = coverage_salary_multiplier
        @deduct_as_percentage = deduct_as_percentage
        @deduction_reduces_taxable_income = deduction_reduces_taxable_income
        @elective = elective
        @employee_deduction = employee_deduction
        @employee_deduction_annual_maximum = employee_deduction_annual_maximum
        @limit_option = limit_option
      end
    end
  end
end
