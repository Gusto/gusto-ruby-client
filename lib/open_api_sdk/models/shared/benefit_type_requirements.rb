# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module OpenApiSDK
  module Shared
  
    # Benefit type requirements response
    class BenefitTypeRequirements < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig

      # Whether the employee should use a benefitâ€™s 'catch up' rate. Only Roth 401k and 401k benefits use this value for employees over 50.
      field :catch_up, T.nilable(::OpenApiSDK::Shared::CatchUp), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('catch_up') } }
      # The maximum company contribution amount per year. A null value signifies no limit.
      field :company_contribution_annual_maximum, T.nilable(::OpenApiSDK::Shared::CompanyContributionAnnualMaximum), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('company_contribution_annual_maximum') } }
      # An object representing the type and value of the company contribution.
      field :contribution, T.nilable(::OpenApiSDK::Shared::BenefitTypeRequirementsContribution), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('contribution') } }
      # The amount that the employee is insured for. Note: company contribution cannot be present if coverage amount is set.
      field :coverage_amount, T.nilable(::OpenApiSDK::Shared::CoverageAmount), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('coverage_amount') } }
      # The coverage amount as a multiple of the employee's salary. Only applicable for Group Term Life benefits. Note: cannot be set if coverage amount is also set.
      field :coverage_salary_multiplier, T.nilable(::OpenApiSDK::Shared::CoverageSalaryMultiplier), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('coverage_salary_multiplier') } }
      # Whether the employee deduction amount should be treated as a percentage to be deducted from each payroll.
      field :deduct_as_percentage, T.nilable(::OpenApiSDK::Shared::DeductAsPercentage), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('deduct_as_percentage') } }
      # The amount to be deducted, per pay period, from the employee's pay.
      field :employee_deduction, T.nilable(::OpenApiSDK::Shared::EmployeeDeduction), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('employee_deduction') } }
      # Some benefits require additional information to determine their limit. For example, for an HSA benefit, the limit option should be either 'Family' or 'Individual'. For a Dependent Care FSA benefit, the limit option should be either 'Joint Filing or Single' or 'Married and Filing Separately'.
      field :limit_option, T.nilable(::OpenApiSDK::Shared::LimitOption), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('limit_option') } }


      sig { params(catch_up: T.nilable(::OpenApiSDK::Shared::CatchUp), company_contribution_annual_maximum: T.nilable(::OpenApiSDK::Shared::CompanyContributionAnnualMaximum), contribution: T.nilable(::OpenApiSDK::Shared::BenefitTypeRequirementsContribution), coverage_amount: T.nilable(::OpenApiSDK::Shared::CoverageAmount), coverage_salary_multiplier: T.nilable(::OpenApiSDK::Shared::CoverageSalaryMultiplier), deduct_as_percentage: T.nilable(::OpenApiSDK::Shared::DeductAsPercentage), employee_deduction: T.nilable(::OpenApiSDK::Shared::EmployeeDeduction), limit_option: T.nilable(::OpenApiSDK::Shared::LimitOption)).void }
      def initialize(catch_up: nil, company_contribution_annual_maximum: nil, contribution: nil, coverage_amount: nil, coverage_salary_multiplier: nil, deduct_as_percentage: nil, employee_deduction: nil, limit_option: nil)
        @catch_up = catch_up
        @company_contribution_annual_maximum = company_contribution_annual_maximum
        @contribution = contribution
        @coverage_amount = coverage_amount
        @coverage_salary_multiplier = coverage_salary_multiplier
        @deduct_as_percentage = deduct_as_percentage
        @employee_deduction = employee_deduction
        @limit_option = limit_option
      end
    end
  end
end
