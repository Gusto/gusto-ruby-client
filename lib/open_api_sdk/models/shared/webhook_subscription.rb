# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module OpenApiSDK
  module Shared
  
    # The representation of webhook subscription.
    class WebhookSubscription < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig

      # The UUID of the webhook subscription.
      field :uuid, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('uuid') } }
      # The status of the webhook subscription.
      field :status, T.nilable(::OpenApiSDK::Shared::WebhookSubscriptionStatus), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('status'), 'decoder': Utils.enum_from_string(::OpenApiSDK::Shared::WebhookSubscriptionStatus, true) } }
      # Receive updates for these types.
      field :subscription_types, T.nilable(T::Array[::OpenApiSDK::Shared::SubscriptionTypes]), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('subscription_types') } }
      # The webhook subscriber URL. Updates will be POSTed to this URL.
      field :url, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('url') } }


      sig { params(uuid: ::String, status: T.nilable(::OpenApiSDK::Shared::WebhookSubscriptionStatus), subscription_types: T.nilable(T::Array[::OpenApiSDK::Shared::SubscriptionTypes]), url: T.nilable(::String)).void }
      def initialize(uuid: nil, status: nil, subscription_types: nil, url: nil)
        @uuid = uuid
        @status = status
        @subscription_types = subscription_types
        @url = url
      end
    end
  end
end
