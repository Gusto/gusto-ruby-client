# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module OpenApiSDK
  module Shared
  
    # Example response
    class Authentication < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig

      # A new access token that can be used for subsequent authenticated requests
      field :access_token, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('access_token') } }
      # Datetime for when the new access token is created.
      field :created_at, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('created_at') } }
      # The TTL of this token. After this amount of time, you must hit the refresh token endpoint to continue making authenticated requests.
      field :expires_in, T.nilable(::Float), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('expires_in') } }
      # A token that must be passed to the refresh token endpoint to get a new authenticated token.
      field :refresh_token, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('refresh_token') } }
      # All of the scopes for which the access token provides access.
      field :scope, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('scope') } }
      # The literal string 'bearer'
      field :token_type, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('token_type') } }


      sig { params(access_token: T.nilable(::String), created_at: T.nilable(::String), expires_in: T.nilable(::Float), refresh_token: T.nilable(::String), scope: T.nilable(::String), token_type: T.nilable(::String)).void }
      def initialize(access_token: nil, created_at: nil, expires_in: nil, refresh_token: nil, scope: nil, token_type: nil)
        @access_token = access_token
        @created_at = created_at
        @expires_in = expires_in
        @refresh_token = refresh_token
        @scope = scope
        @token_type = token_type
      end
    end
  end
end
