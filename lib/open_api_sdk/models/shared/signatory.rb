# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module OpenApiSDK
  module Shared
  
    # The representation of a company's signatory
    class Signatory < ::OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :uuid, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('uuid') } }

      field :birthday, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('birthday') } }

      field :email, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('email') } }

      field :first_name, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('first_name') } }
      # Indicates whether the signatory has an SSN in Gusto.
      field :has_ssn, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('has_ssn') } }

      field :home_address, T.nilable(::OpenApiSDK::Shared::HomeAddress), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('home_address') } }
      # |   |   |
      # |---|---|
      # |__Status__| __Description__ |
      # | Pass | Signatory can sign all forms |
      # | Fail | Signatory cannot sign forms |
      # | Skipped | Signatory cannot sign Form 8655 until the form is manually uploaded as wet-signed |
      # | null | Identity verification process has not been completed |
      field :identity_verification_status, T.nilable(::OpenApiSDK::Shared::IdentityVerificationStatus), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('identity_verification_status'), 'decoder': Utils.enum_from_string(::OpenApiSDK::Shared::IdentityVerificationStatus, true) } }
      # Whether or not the signatory is also the payroll admin of the company.
      field :is_admin, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('is_admin') } }

      field :last_name, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('last_name') } }

      field :phone, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('phone') } }

      field :title, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('title') } }
      # The current version of the signatory. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
      field :version, T.nilable(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('version') } }


      sig { params(uuid: ::String, birthday: T.nilable(::String), email: T.nilable(::String), first_name: T.nilable(::String), has_ssn: T.nilable(T::Boolean), home_address: T.nilable(::OpenApiSDK::Shared::HomeAddress), identity_verification_status: T.nilable(::OpenApiSDK::Shared::IdentityVerificationStatus), is_admin: T.nilable(T::Boolean), last_name: T.nilable(::String), phone: T.nilable(::String), title: T.nilable(::String), version: T.nilable(::String)).void }
      def initialize(uuid: nil, birthday: nil, email: nil, first_name: nil, has_ssn: nil, home_address: nil, identity_verification_status: nil, is_admin: nil, last_name: nil, phone: nil, title: nil, version: nil)
        @uuid = uuid
        @birthday = birthday
        @email = email
        @first_name = first_name
        @has_ssn = has_ssn
        @home_address = home_address
        @identity_verification_status = identity_verification_status
        @is_admin = is_admin
        @last_name = last_name
        @phone = phone
        @title = title
        @version = version
      end
    end
  end
end
